/**

Generated by the following Solidity interface...
```solidity
interface HoprStakingProxyForNetworkRegistry {
    error MaxRegistrationsMismatch();
    error NftRanksMismatch();
    error OwnableInvalidOwner(address owner);
    error OwnableUnauthorizedAccount(address account);
    error SameStakingThreshold();
    error ZeroAddress(string reason);

    event NftTypeAndRankAdded(uint256 indexed nftType, string nftRank);
    event NftTypeAndRankRemoved(uint256 indexed nftType, string nftRank);
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    event SpecialNftTypeAndRankAdded(uint256 indexed nftType, string nftRank, uint256 indexed maxRegistration);
    event SpecialNftTypeAndRankRemoved(uint256 indexed nftType, string nftRank);
    event StakeContractUpdated(address indexed stakeContract);
    event ThresholdUpdated(uint256 indexed threshold);

    constructor(address _stakeContract, address _newOwner, uint256 _minStake);

    function canOperateFor(address, address) external pure returns (bool eligiblity);
    function eligibleNftTypeAndRank(uint256) external view returns (uint256 nftType, string memory nftRank);
    function maxAllowedRegistrations(address account) external view returns (uint256);
    function maxRegistrationsPerSpecialNft(uint256) external view returns (uint256);
    function owner() external view returns (address);
    function ownerAddNftTypeAndRank(uint256 nftType, string memory nftRank) external;
    function ownerBatchAddNftTypeAndRank(uint256[] memory nftTypes, string[] memory nftRanks) external;
    function ownerBatchAddSpecialNftTypeAndRank(uint256[] memory nftTypes, string[] memory nftRanks, uint256[] memory maxRegistrations) external;
    function ownerBatchRemoveNftTypeAndRank(uint256[] memory nftTypes, string[] memory nftRanks) external;
    function ownerBatchRemoveSpecialNftTypeAndRank(uint256[] memory nftTypes, string[] memory nftRanks) external;
    function ownerRemoveNftTypeAndRank(uint256 nftType, string memory nftRank) external;
    function ownerUpdateThreshold(uint256 newThreshold) external;
    function renounceOwnership() external;
    function specialNftTypeAndRank(uint256) external view returns (uint256 nftType, string memory nftRank);
    function stakeContract() external view returns (address);
    function stakeThreshold() external view returns (uint256);
    function transferOwnership(address newOwner) external;
    function updateStakeContract(address _stakeContract) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "_stakeContract",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_newOwner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "_minStake",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "canOperateFor",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "eligiblity",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "eligibleNftTypeAndRank",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "nftType",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "nftRank",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxAllowedRegistrations",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "maxRegistrationsPerSpecialNft",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ownerAddNftTypeAndRank",
    "inputs": [
      {
        "name": "nftType",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "nftRank",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ownerBatchAddNftTypeAndRank",
    "inputs": [
      {
        "name": "nftTypes",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "nftRanks",
        "type": "string[]",
        "internalType": "string[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ownerBatchAddSpecialNftTypeAndRank",
    "inputs": [
      {
        "name": "nftTypes",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "nftRanks",
        "type": "string[]",
        "internalType": "string[]"
      },
      {
        "name": "maxRegistrations",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ownerBatchRemoveNftTypeAndRank",
    "inputs": [
      {
        "name": "nftTypes",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "nftRanks",
        "type": "string[]",
        "internalType": "string[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ownerBatchRemoveSpecialNftTypeAndRank",
    "inputs": [
      {
        "name": "nftTypes",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "nftRanks",
        "type": "string[]",
        "internalType": "string[]"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ownerRemoveNftTypeAndRank",
    "inputs": [
      {
        "name": "nftType",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "nftRank",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "ownerUpdateThreshold",
    "inputs": [
      {
        "name": "newThreshold",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "renounceOwnership",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "specialNftTypeAndRank",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "nftType",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "nftRank",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "stakeContract",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IHoprStake"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "stakeThreshold",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferOwnership",
    "inputs": [
      {
        "name": "newOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "updateStakeContract",
    "inputs": [
      {
        "name": "_stakeContract",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "NftTypeAndRankAdded",
    "inputs": [
      {
        "name": "nftType",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "nftRank",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "NftTypeAndRankRemoved",
    "inputs": [
      {
        "name": "nftType",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "nftRank",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "OwnershipTransferred",
    "inputs": [
      {
        "name": "previousOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "newOwner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SpecialNftTypeAndRankAdded",
    "inputs": [
      {
        "name": "nftType",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "nftRank",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "maxRegistration",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SpecialNftTypeAndRankRemoved",
    "inputs": [
      {
        "name": "nftType",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "nftRank",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "StakeContractUpdated",
    "inputs": [
      {
        "name": "stakeContract",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ThresholdUpdated",
    "inputs": [
      {
        "name": "threshold",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "MaxRegistrationsMismatch",
    "inputs": []
  },
  {
    "type": "error",
    "name": "NftRanksMismatch",
    "inputs": []
  },
  {
    "type": "error",
    "name": "OwnableInvalidOwner",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "OwnableUnauthorizedAccount",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "SameStakingThreshold",
    "inputs": []
  },
  {
    "type": "error",
    "name": "ZeroAddress",
    "inputs": [
      {
        "name": "reason",
        "type": "string",
        "internalType": "string"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod HoprStakingProxyForNetworkRegistry {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b50604051611b3d380380611b3d83398101604081905261002e916101b1565b816001600160a01b03811661005d57604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b610066816100fe565b506001600160a01b0383166100be5760405163eac0d38960e01b815260206004820181905260248201527f5f7374616b65436f6e7472616374206d757374206e6f7420626520656d7074796044820152606401610054565b6100c78361014d565b600281905560405181907fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe171905f90a25050506101ea565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f573bbfa679af6fdcdbd9cf191c5ef3e526599ac2bf75e9177d47adb8530b9c69905f90a250565b80516001600160a01b03811681146101ac575f5ffd5b919050565b5f5f5f606084860312156101c3575f5ffd5b6101cc84610196565b92506101da60208501610196565b9150604084015190509250925092565b611946806101f75f395ff3fe608060405234801561000f575f5ffd5b5060043610610111575f3560e01c8063b05e8ba91161009e578063de626c0e1161006e578063de626c0e14610249578063ee50c7c41461025c578063f11f77f91461026f578063f2fde38b14610278578063fb66ac571461028b575f5ffd5b8063b05e8ba9146101df578063b3544e82146101f2578063ba1cef2314610213578063d85ad04414610226575f5ffd5b80636a3b64b6116100e45780636a3b64b61461018e578063715018a6146101a1578063830c6cc2146101a95780638da5cb5b146101bc5780639b97076f146101cc575f5ffd5b80631a186227146101155780632c3ec80b14610145578063506472cc14610166578063654251eb1461017b575b5f5ffd5b600154610128906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610158610153366004611289565b61029e565b60405161013c9291906112ce565b610179610174366004611336565b610352565b005b6101796101893660046113b6565b61040c565b61017961019c366004611473565b610422565b610179610519565b6101796101b736600461152d565b61052c565b5f546001600160a01b0316610128565b6101796101da3660046113b6565b610540565b6101796101ed366004611336565b610552565b61020561020036600461152d565b610605565b60405190815260200161013c565b610205610221366004611289565b61099e565b610239610234366004611546565b6109bd565b604051901515815260200161013c565b610158610257366004611289565b6109c6565b61017961026a366004611289565b6109d5565b61020560025481565b61017961028636600461152d565b610a31565b610179610299366004611336565b610a70565b600581815481106102ad575f80fd5b5f91825260209091206002909102018054600182018054919350906102d190611577565b80601f01602080910402602001604051908101604052809291908181526020018280546102fd90611577565b80156103485780601f1061031f57610100808354040283529160200191610348565b820191905f5260205f20905b81548152906001019060200180831161032b57829003601f168201915b5050505050905082565b61035a610b23565b82811461037a57604051634885f59b60e01b815260040160405180910390fd5b5f5b83811015610405576103fd858583818110610399576103996115af565b905060200201358484848181106103b2576103b26115af565b90506020028101906103c491906115c3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610b4f92505050565b60010161037c565b5050505050565b610414610b23565b61041e8282610c9a565b5050565b61042a610b23565b84831461044a57604051634885f59b60e01b815260040160405180910390fd5b84811461046a5760405163197910e960e01b815260040160405180910390fd5b5f5b8581101561051057610508878783818110610489576104896115af565b905060200201358686848181106104a2576104a26115af565b90506020028101906104b491906115c3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508892508791508690508181106104fc576104fc6115af565b90506020020135610e03565b60010161046c565b50505050505050565b610521610b23565b61052a5f610fd3565b565b610534610b23565b61053d81611022565b50565b610548610b23565b61041e8282610b4f565b61055a610b23565b82811461057a57604051634885f59b60e01b815260040160405180910390fd5b5f5b83811015610405576105fd858583818110610599576105996115af565b905060200201358484848181106105b2576105b26115af565b90506020028101906105c491906115c3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061106b92505050565b60010161057c565b5f6002545f0361061657505f919050565b5f805b6005548110156107a1575f60058281548110610637576106376115af565b905f5260205f2090600202016040518060400160405290815f820154815260200160018201805461066790611577565b80601f016020809104026020016040519081016040528092919081815260200182805461069390611577565b80156106de5780601f106106b5576101008083540402835291602001916106de565b820191905f5260205f20905b8154815290600101906020018083116106c157829003601f168201915b505050919092525050600154825160208401516040516396a9cd7d60e01b81529495506001600160a01b03909216936396a9cd7d935061072392908a90600401611606565b602060405180830381865afa15801561073e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107629190611636565b15610798576107956004838154811061077d5761077d6115af565b905f5260205f2001548461122d90919063ffffffff16565b92505b50600101610619565b5060015460405163f978fff160e01b81526001600160a01b0385811660048301525f92169063f978fff190602401602060405180830381865afa1580156107ea573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061080e9190611655565b9050600254811015610821575092915050565b5f5b600354811015610995575f60038281548110610841576108416115af565b905f5260205f2090600202016040518060400160405290815f820154815260200160018201805461087190611577565b80601f016020809104026020016040519081016040528092919081815260200182805461089d90611577565b80156108e85780601f106108bf576101008083540402835291602001916108e8565b820191905f5260205f20905b8154815290600101906020018083116108cb57829003601f168201915b505050919092525050600154825160208401516040516396a9cd7d60e01b81529495506001600160a01b03909216936396a9cd7d935061092d92908b90600401611606565b602060405180830381865afa158015610948573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061096c9190611636565b1561098c5761098960025484610982919061166c565b859061122d565b93505b50600101610823565b50909392505050565b600481815481106109ad575f80fd5b5f91825260209091200154905081565b60015b92915050565b600381815481106102ad575f80fd5b6109dd610b23565b80600254036109ff576040516320e47b1360e01b815260040160405180910390fd5b600281905560405181907fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe171905f90a250565b610a39610b23565b6001600160a01b038116610a6757604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61053d81610fd3565b610a78610b23565b828114610a9857604051634885f59b60e01b815260040160405180910390fd5b5f5b8381101561040557610b1b858583818110610ab757610ab76115af565b90506020020135848484818110610ad057610ad06115af565b9050602002810190610ae291906115c3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610c9a92505050565b600101610a9a565b5f546001600160a01b0316331461052a5760405163118cdaa760e01b8152336004820152602401610a5e565b5f5b600354811015610bd9578260038281548110610b6f57610b6f6115af565b905f5260205f2090600202015f0154148015610bc75750818051906020012060038281548110610ba157610ba16115af565b905f5260205f209060020201600101604051610bbd919061168b565b6040518091039020145b15610bd157505050565b600101610b51565b506040805180820190915282815260208101828152600380546001810182555f91909152825160029091027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b8101918255915190917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c0190610c5b9082611740565b505050817f2360ee3e77485441cfa07e30e8dc5b031fac38455647c89a763434f58733fcc182604051610c8e91906117fe565b60405180910390a25050565b5f5b600354811015610dfe578260038281548110610cba57610cba6115af565b905f5260205f2090600202015f0154148015610d125750818051906020012060038281548110610cec57610cec6115af565b905f5260205f209060020201600101604051610d08919061168b565b6040518091039020145b15610df65760038054610d2790600190611810565b81548110610d3757610d376115af565b905f5260205f20906002020160038281548110610d5657610d566115af565b5f91825260209091208254600290920201908155600180820190610d7c9084018261182f565b509050506003805480610d9157610d916118fc565b5f8281526020812060025f199093019283020181815590610db5600183018261123f565b50509055827fb1323e42d97b2b3d45f9d4641bf4b6b3f9d0d01e90832ae7b7413109b7a5d34783604051610de991906117fe565b60405180910390a2505050565b600101610c9c565b505050565b5f5b600554811015610ee7578360058281548110610e2357610e236115af565b905f5260205f2090600202015f0154148015610e7b5750828051906020012060058281548110610e5557610e556115af565b905f5260205f209060020201600101604051610e71919061168b565b6040518091039020145b15610edf578160048281548110610e9457610e946115af565b905f5260205f20018190555081847fe43bf5f5f8a1211930e5726ba0abceacb1748f97b2966db30a818ba10961cbcc85604051610ed191906117fe565b60405180910390a350505050565b600101610e05565b6040805180820190915284815260208101848152600580546001810182555f91909152825160029091027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101918255915190917f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db10190610f689082611740565b5050600480546001810182555f919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0183905550604051829085907fe43bf5f5f8a1211930e5726ba0abceacb1748f97b2966db30a818ba10961cbcc90610ed19087906117fe565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f573bbfa679af6fdcdbd9cf191c5ef3e526599ac2bf75e9177d47adb8530b9c69905f90a250565b5f5b600554811015610dfe57826005828154811061108b5761108b6115af565b905f5260205f2090600202015f01541480156110e357508180519060200120600582815481106110bd576110bd6115af565b905f5260205f2090600202016001016040516110d9919061168b565b6040518091039020145b1561122557600580546110f890600190611810565b81548110611108576111086115af565b905f5260205f20906002020160058281548110611127576111276115af565b5f9182526020909120825460029092020190815560018082019061114d9084018261182f565b509050506005805480611162576111626118fc565b5f8281526020812060025f199093019283020181815590611186600183018261123f565b505090556004805461119a90600190611810565b815481106111aa576111aa6115af565b905f5260205f200154600482815481106111c6576111c66115af565b5f9182526020909120015560048054806111e2576111e26118fc565b600190038181905f5260205f20015f90559055827fdb75199103504bd1d3653de758d4295bf00d4587e1d53dfc114464cc47ed97b783604051610de991906117fe565b60010161106d565b5f8282188284110282185b9392505050565b50805461124b90611577565b5f825580601f1061125a575050565b601f0160209004905f5260205f209081019061053d91905b80821115611285575f8155600101611272565b5090565b5f60208284031215611299575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b828152604060208201525f6112e660408301846112a0565b949350505050565b5f5f83601f8401126112fe575f5ffd5b50813567ffffffffffffffff811115611315575f5ffd5b6020830191508360208260051b850101111561132f575f5ffd5b9250929050565b5f5f5f5f60408587031215611349575f5ffd5b843567ffffffffffffffff81111561135f575f5ffd5b61136b878288016112ee565b909550935050602085013567ffffffffffffffff81111561138a575f5ffd5b611396878288016112ee565b95989497509550505050565b634e487b7160e01b5f52604160045260245ffd5b5f5f604083850312156113c7575f5ffd5b82359150602083013567ffffffffffffffff8111156113e4575f5ffd5b8301601f810185136113f4575f5ffd5b803567ffffffffffffffff81111561140e5761140e6113a2565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561143d5761143d6113a2565b604052818152828201602001871015611454575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b5f5f5f5f5f5f60608789031215611488575f5ffd5b863567ffffffffffffffff81111561149e575f5ffd5b6114aa89828a016112ee565b909750955050602087013567ffffffffffffffff8111156114c9575f5ffd5b6114d589828a016112ee565b909550935050604087013567ffffffffffffffff8111156114f4575f5ffd5b61150089828a016112ee565b979a9699509497509295939492505050565b80356001600160a01b0381168114611528575f5ffd5b919050565b5f6020828403121561153d575f5ffd5b61123882611512565b5f5f60408385031215611557575f5ffd5b61156083611512565b915061156e60208401611512565b90509250929050565b600181811c9082168061158b57607f821691505b6020821081036115a957634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b5f5f8335601e198436030181126115d8575f5ffd5b83018035915067ffffffffffffffff8211156115f2575f5ffd5b60200191503681900382131561132f575f5ffd5b838152606060208201525f61161e60608301856112a0565b905060018060a01b0383166040830152949350505050565b5f60208284031215611646575f5ffd5b81518015158114611238575f5ffd5b5f60208284031215611665575f5ffd5b5051919050565b5f8261168657634e487b7160e01b5f52601260045260245ffd5b500490565b5f5f835461169881611577565b6001821680156116af57600181146116c4576116f1565b60ff19831686528115158202860193506116f1565b865f5260205f205f5b838110156116e9578154888201526001909101906020016116cd565b505081860193505b509195945050505050565b601f821115610dfe57805f5260205f20601f840160051c810160208510156117215750805b601f840160051c820191505b81811015610405575f815560010161172d565b815167ffffffffffffffff81111561175a5761175a6113a2565b61176e816117688454611577565b846116fc565b6020601f8211600181146117a3575f83156117895750848201515b600184901b5f19600386901b1c198216175b855550610405565b5f84815260208120601f198516915b828110156117d257878501518255602094850194600190920191016117b2565b50848210156117ef57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b602081525f61123860208301846112a0565b818103818111156109c057634e487b7160e01b5f52601160045260245ffd5b81810361183a575050565b6118448254611577565b67ffffffffffffffff81111561185c5761185c6113a2565b61186a816117688454611577565b5f601f821160018114611899575f8315611789575081850154600184901b5f19600386901b1c1982161761179b565b5f8581526020808220868352908220601f198616925b838110156118cf57828601548255600195860195909101906020016118af565b50858310156118ec57818501545f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52603160045260245ffdfea264697066735822122021841cf94794610857b29ac010419c4b0a3a8e7e03157c0c44484c5be51890de64736f6c634300081e0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\x1B=8\x03\x80a\x1B=\x839\x81\x01`@\x81\x90Ra\0.\x91a\x01\xB1V[\x81`\x01`\x01`\xA0\x1B\x03\x81\x16a\0]W`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\0f\x81a\0\xFEV[P`\x01`\x01`\xA0\x1B\x03\x83\x16a\0\xBEW`@Qc\xEA\xC0\xD3\x89`\xE0\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7F_stakeContract must not be empty`D\x82\x01R`d\x01a\0TV[a\0\xC7\x83a\x01MV[`\x02\x81\x90U`@Q\x81\x90\x7F\xAD\xFA\x8E\xCB!\xB6\x96.\xBC\xD0\xAD\xBD\x9A\xB9\x85\xB7\xB4\xC5\xB5\xEB;\r\xEA\xD6\x83\x17\x15e\xC7\xBF\xE1q\x90_\x90\xA2PPPa\x01\xEAV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x7FW;\xBF\xA6y\xAFo\xDC\xDB\xD9\xCF\x19\x1C^\xF3\xE5&Y\x9A\xC2\xBFu\xE9\x17}G\xAD\xB8S\x0B\x9Ci\x90_\x90\xA2PV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x01\xACW__\xFD[\x91\x90PV[___``\x84\x86\x03\x12\x15a\x01\xC3W__\xFD[a\x01\xCC\x84a\x01\x96V[\x92Pa\x01\xDA` \x85\x01a\x01\x96V[\x91P`@\x84\x01Q\x90P\x92P\x92P\x92V[a\x19F\x80a\x01\xF7_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x01\x11W_5`\xE0\x1C\x80c\xB0^\x8B\xA9\x11a\0\x9EW\x80c\xDEbl\x0E\x11a\0nW\x80c\xDEbl\x0E\x14a\x02IW\x80c\xEEP\xC7\xC4\x14a\x02\\W\x80c\xF1\x1Fw\xF9\x14a\x02oW\x80c\xF2\xFD\xE3\x8B\x14a\x02xW\x80c\xFBf\xACW\x14a\x02\x8BW__\xFD[\x80c\xB0^\x8B\xA9\x14a\x01\xDFW\x80c\xB3TN\x82\x14a\x01\xF2W\x80c\xBA\x1C\xEF#\x14a\x02\x13W\x80c\xD8Z\xD0D\x14a\x02&W__\xFD[\x80cj;d\xB6\x11a\0\xE4W\x80cj;d\xB6\x14a\x01\x8EW\x80cqP\x18\xA6\x14a\x01\xA1W\x80c\x83\x0Cl\xC2\x14a\x01\xA9W\x80c\x8D\xA5\xCB[\x14a\x01\xBCW\x80c\x9B\x97\x07o\x14a\x01\xCCW__\xFD[\x80c\x1A\x18b'\x14a\x01\x15W\x80c,>\xC8\x0B\x14a\x01EW\x80cPdr\xCC\x14a\x01fW\x80ceBQ\xEB\x14a\x01{W[__\xFD[`\x01Ta\x01(\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01Xa\x01S6`\x04a\x12\x89V[a\x02\x9EV[`@Qa\x01<\x92\x91\x90a\x12\xCEV[a\x01ya\x01t6`\x04a\x136V[a\x03RV[\0[a\x01ya\x01\x896`\x04a\x13\xB6V[a\x04\x0CV[a\x01ya\x01\x9C6`\x04a\x14sV[a\x04\"V[a\x01ya\x05\x19V[a\x01ya\x01\xB76`\x04a\x15-V[a\x05,V[_T`\x01`\x01`\xA0\x1B\x03\x16a\x01(V[a\x01ya\x01\xDA6`\x04a\x13\xB6V[a\x05@V[a\x01ya\x01\xED6`\x04a\x136V[a\x05RV[a\x02\x05a\x02\x006`\x04a\x15-V[a\x06\x05V[`@Q\x90\x81R` \x01a\x01<V[a\x02\x05a\x02!6`\x04a\x12\x89V[a\t\x9EV[a\x029a\x0246`\x04a\x15FV[a\t\xBDV[`@Q\x90\x15\x15\x81R` \x01a\x01<V[a\x01Xa\x02W6`\x04a\x12\x89V[a\t\xC6V[a\x01ya\x02j6`\x04a\x12\x89V[a\t\xD5V[a\x02\x05`\x02T\x81V[a\x01ya\x02\x866`\x04a\x15-V[a\n1V[a\x01ya\x02\x996`\x04a\x136V[a\npV[`\x05\x81\x81T\x81\x10a\x02\xADW_\x80\xFD[_\x91\x82R` \x90\x91 `\x02\x90\x91\x02\x01\x80T`\x01\x82\x01\x80T\x91\x93P\x90a\x02\xD1\x90a\x15wV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\xFD\x90a\x15wV[\x80\x15a\x03HW\x80`\x1F\x10a\x03\x1FWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x03HV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x03+W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x82V[a\x03Za\x0B#V[\x82\x81\x14a\x03zW`@QcH\x85\xF5\x9B`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x83\x81\x10\x15a\x04\x05Wa\x03\xFD\x85\x85\x83\x81\x81\x10a\x03\x99Wa\x03\x99a\x15\xAFV[\x90P` \x02\x015\x84\x84\x84\x81\x81\x10a\x03\xB2Wa\x03\xB2a\x15\xAFV[\x90P` \x02\x81\x01\x90a\x03\xC4\x91\x90a\x15\xC3V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0BO\x92PPPV[`\x01\x01a\x03|V[PPPPPV[a\x04\x14a\x0B#V[a\x04\x1E\x82\x82a\x0C\x9AV[PPV[a\x04*a\x0B#V[\x84\x83\x14a\x04JW`@QcH\x85\xF5\x9B`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x84\x81\x14a\x04jW`@Qc\x19y\x10\xE9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x85\x81\x10\x15a\x05\x10Wa\x05\x08\x87\x87\x83\x81\x81\x10a\x04\x89Wa\x04\x89a\x15\xAFV[\x90P` \x02\x015\x86\x86\x84\x81\x81\x10a\x04\xA2Wa\x04\xA2a\x15\xAFV[\x90P` \x02\x81\x01\x90a\x04\xB4\x91\x90a\x15\xC3V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x88\x92P\x87\x91P\x86\x90P\x81\x81\x10a\x04\xFCWa\x04\xFCa\x15\xAFV[\x90P` \x02\x015a\x0E\x03V[`\x01\x01a\x04lV[PPPPPPPV[a\x05!a\x0B#V[a\x05*_a\x0F\xD3V[V[a\x054a\x0B#V[a\x05=\x81a\x10\"V[PV[a\x05Ha\x0B#V[a\x04\x1E\x82\x82a\x0BOV[a\x05Za\x0B#V[\x82\x81\x14a\x05zW`@QcH\x85\xF5\x9B`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x83\x81\x10\x15a\x04\x05Wa\x05\xFD\x85\x85\x83\x81\x81\x10a\x05\x99Wa\x05\x99a\x15\xAFV[\x90P` \x02\x015\x84\x84\x84\x81\x81\x10a\x05\xB2Wa\x05\xB2a\x15\xAFV[\x90P` \x02\x81\x01\x90a\x05\xC4\x91\x90a\x15\xC3V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x10k\x92PPPV[`\x01\x01a\x05|V[_`\x02T_\x03a\x06\x16WP_\x91\x90PV[_\x80[`\x05T\x81\x10\x15a\x07\xA1W_`\x05\x82\x81T\x81\x10a\x067Wa\x067a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`@Q\x80`@\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01\x80Ta\x06g\x90a\x15wV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x06\x93\x90a\x15wV[\x80\x15a\x06\xDEW\x80`\x1F\x10a\x06\xB5Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x06\xDEV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x06\xC1W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPP\x91\x90\x92RPP`\x01T\x82Q` \x84\x01Q`@Qc\x96\xA9\xCD}`\xE0\x1B\x81R\x94\x95P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93c\x96\xA9\xCD}\x93Pa\x07#\x92\x90\x8A\x90`\x04\x01a\x16\x06V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07>W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07b\x91\x90a\x166V[\x15a\x07\x98Wa\x07\x95`\x04\x83\x81T\x81\x10a\x07}Wa\x07}a\x15\xAFV[\x90_R` _ \x01T\x84a\x12-\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x92P[P`\x01\x01a\x06\x19V[P`\x01T`@Qc\xF9x\xFF\xF1`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R_\x92\x16\x90c\xF9x\xFF\xF1\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07\xEAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x0E\x91\x90a\x16UV[\x90P`\x02T\x81\x10\x15a\x08!WP\x92\x91PPV[_[`\x03T\x81\x10\x15a\t\x95W_`\x03\x82\x81T\x81\x10a\x08AWa\x08Aa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`@Q\x80`@\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01\x80Ta\x08q\x90a\x15wV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x08\x9D\x90a\x15wV[\x80\x15a\x08\xE8W\x80`\x1F\x10a\x08\xBFWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x08\xE8V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x08\xCBW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPP\x91\x90\x92RPP`\x01T\x82Q` \x84\x01Q`@Qc\x96\xA9\xCD}`\xE0\x1B\x81R\x94\x95P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93c\x96\xA9\xCD}\x93Pa\t-\x92\x90\x8B\x90`\x04\x01a\x16\x06V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\tHW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\tl\x91\x90a\x166V[\x15a\t\x8CWa\t\x89`\x02T\x84a\t\x82\x91\x90a\x16lV[\x85\x90a\x12-V[\x93P[P`\x01\x01a\x08#V[P\x90\x93\x92PPPV[`\x04\x81\x81T\x81\x10a\t\xADW_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x01[\x92\x91PPV[`\x03\x81\x81T\x81\x10a\x02\xADW_\x80\xFD[a\t\xDDa\x0B#V[\x80`\x02T\x03a\t\xFFW`@Qc \xE4{\x13`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x81\x90U`@Q\x81\x90\x7F\xAD\xFA\x8E\xCB!\xB6\x96.\xBC\xD0\xAD\xBD\x9A\xB9\x85\xB7\xB4\xC5\xB5\xEB;\r\xEA\xD6\x83\x17\x15e\xC7\xBF\xE1q\x90_\x90\xA2PV[a\n9a\x0B#V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\ngW`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\x05=\x81a\x0F\xD3V[a\nxa\x0B#V[\x82\x81\x14a\n\x98W`@QcH\x85\xF5\x9B`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x83\x81\x10\x15a\x04\x05Wa\x0B\x1B\x85\x85\x83\x81\x81\x10a\n\xB7Wa\n\xB7a\x15\xAFV[\x90P` \x02\x015\x84\x84\x84\x81\x81\x10a\n\xD0Wa\n\xD0a\x15\xAFV[\x90P` \x02\x81\x01\x90a\n\xE2\x91\x90a\x15\xC3V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0C\x9A\x92PPPV[`\x01\x01a\n\x9AV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x05*W`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\n^V[_[`\x03T\x81\x10\x15a\x0B\xD9W\x82`\x03\x82\x81T\x81\x10a\x0BoWa\x0Boa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01_\x01T\x14\x80\x15a\x0B\xC7WP\x81\x80Q\x90` \x01 `\x03\x82\x81T\x81\x10a\x0B\xA1Wa\x0B\xA1a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x01\x01`@Qa\x0B\xBD\x91\x90a\x16\x8BV[`@Q\x80\x91\x03\x90 \x14[\x15a\x0B\xD1WPPPV[`\x01\x01a\x0BQV[P`@\x80Q\x80\x82\x01\x90\x91R\x82\x81R` \x81\x01\x82\x81R`\x03\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x82Q`\x02\x90\x91\x02\x7F\xC2WZ\x0E\x9EY<\0\xF9Y\xF8\xC9/\x12\xDB(i\xC39Z;\x05\x02\xD0^%\x16Doq\xF8[\x81\x01\x91\x82U\x91Q\x90\x91\x7F\xC2WZ\x0E\x9EY<\0\xF9Y\xF8\xC9/\x12\xDB(i\xC39Z;\x05\x02\xD0^%\x16Doq\xF8\\\x01\x90a\x0C[\x90\x82a\x17@V[PPP\x81\x7F#`\xEE>wHTA\xCF\xA0~0\xE8\xDC[\x03\x1F\xAC8EVG\xC8\x9Av44\xF5\x873\xFC\xC1\x82`@Qa\x0C\x8E\x91\x90a\x17\xFEV[`@Q\x80\x91\x03\x90\xA2PPV[_[`\x03T\x81\x10\x15a\r\xFEW\x82`\x03\x82\x81T\x81\x10a\x0C\xBAWa\x0C\xBAa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01_\x01T\x14\x80\x15a\r\x12WP\x81\x80Q\x90` \x01 `\x03\x82\x81T\x81\x10a\x0C\xECWa\x0C\xECa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x01\x01`@Qa\r\x08\x91\x90a\x16\x8BV[`@Q\x80\x91\x03\x90 \x14[\x15a\r\xF6W`\x03\x80Ta\r'\x90`\x01\x90a\x18\x10V[\x81T\x81\x10a\r7Wa\r7a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x03\x82\x81T\x81\x10a\rVWa\rVa\x15\xAFV[_\x91\x82R` \x90\x91 \x82T`\x02\x90\x92\x02\x01\x90\x81U`\x01\x80\x82\x01\x90a\r|\x90\x84\x01\x82a\x18/V[P\x90PP`\x03\x80T\x80a\r\x91Wa\r\x91a\x18\xFCV[_\x82\x81R` \x81 `\x02_\x19\x90\x93\x01\x92\x83\x02\x01\x81\x81U\x90a\r\xB5`\x01\x83\x01\x82a\x12?V[PP\x90U\x82\x7F\xB12>B\xD9{+=E\xF9\xD4d\x1B\xF4\xB6\xB3\xF9\xD0\xD0\x1E\x90\x83*\xE7\xB7A1\t\xB7\xA5\xD3G\x83`@Qa\r\xE9\x91\x90a\x17\xFEV[`@Q\x80\x91\x03\x90\xA2PPPV[`\x01\x01a\x0C\x9CV[PPPV[_[`\x05T\x81\x10\x15a\x0E\xE7W\x83`\x05\x82\x81T\x81\x10a\x0E#Wa\x0E#a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01_\x01T\x14\x80\x15a\x0E{WP\x82\x80Q\x90` \x01 `\x05\x82\x81T\x81\x10a\x0EUWa\x0EUa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x01\x01`@Qa\x0Eq\x91\x90a\x16\x8BV[`@Q\x80\x91\x03\x90 \x14[\x15a\x0E\xDFW\x81`\x04\x82\x81T\x81\x10a\x0E\x94Wa\x0E\x94a\x15\xAFV[\x90_R` _ \x01\x81\x90UP\x81\x84\x7F\xE4;\xF5\xF5\xF8\xA1!\x190\xE5rk\xA0\xAB\xCE\xAC\xB1t\x8F\x97\xB2\x96m\xB3\n\x81\x8B\xA1\ta\xCB\xCC\x85`@Qa\x0E\xD1\x91\x90a\x17\xFEV[`@Q\x80\x91\x03\x90\xA3PPPPV[`\x01\x01a\x0E\x05V[`@\x80Q\x80\x82\x01\x90\x91R\x84\x81R` \x81\x01\x84\x81R`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x82Q`\x02\x90\x91\x02\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x81\x01\x91\x82U\x91Q\x90\x91\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB1\x01\x90a\x0Fh\x90\x82a\x17@V[PP`\x04\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01\x83\x90UP`@Q\x82\x90\x85\x90\x7F\xE4;\xF5\xF5\xF8\xA1!\x190\xE5rk\xA0\xAB\xCE\xAC\xB1t\x8F\x97\xB2\x96m\xB3\n\x81\x8B\xA1\ta\xCB\xCC\x90a\x0E\xD1\x90\x87\x90a\x17\xFEV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x7FW;\xBF\xA6y\xAFo\xDC\xDB\xD9\xCF\x19\x1C^\xF3\xE5&Y\x9A\xC2\xBFu\xE9\x17}G\xAD\xB8S\x0B\x9Ci\x90_\x90\xA2PV[_[`\x05T\x81\x10\x15a\r\xFEW\x82`\x05\x82\x81T\x81\x10a\x10\x8BWa\x10\x8Ba\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01_\x01T\x14\x80\x15a\x10\xE3WP\x81\x80Q\x90` \x01 `\x05\x82\x81T\x81\x10a\x10\xBDWa\x10\xBDa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x01\x01`@Qa\x10\xD9\x91\x90a\x16\x8BV[`@Q\x80\x91\x03\x90 \x14[\x15a\x12%W`\x05\x80Ta\x10\xF8\x90`\x01\x90a\x18\x10V[\x81T\x81\x10a\x11\x08Wa\x11\x08a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x05\x82\x81T\x81\x10a\x11'Wa\x11'a\x15\xAFV[_\x91\x82R` \x90\x91 \x82T`\x02\x90\x92\x02\x01\x90\x81U`\x01\x80\x82\x01\x90a\x11M\x90\x84\x01\x82a\x18/V[P\x90PP`\x05\x80T\x80a\x11bWa\x11ba\x18\xFCV[_\x82\x81R` \x81 `\x02_\x19\x90\x93\x01\x92\x83\x02\x01\x81\x81U\x90a\x11\x86`\x01\x83\x01\x82a\x12?V[PP\x90U`\x04\x80Ta\x11\x9A\x90`\x01\x90a\x18\x10V[\x81T\x81\x10a\x11\xAAWa\x11\xAAa\x15\xAFV[\x90_R` _ \x01T`\x04\x82\x81T\x81\x10a\x11\xC6Wa\x11\xC6a\x15\xAFV[_\x91\x82R` \x90\x91 \x01U`\x04\x80T\x80a\x11\xE2Wa\x11\xE2a\x18\xFCV[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90U\x82\x7F\xDBu\x19\x91\x03PK\xD1\xD3e=\xE7X\xD4)[\xF0\rE\x87\xE1\xD5=\xFC\x11Dd\xCCG\xED\x97\xB7\x83`@Qa\r\xE9\x91\x90a\x17\xFEV[`\x01\x01a\x10mV[_\x82\x82\x18\x82\x84\x11\x02\x82\x18[\x93\x92PPPV[P\x80Ta\x12K\x90a\x15wV[_\x82U\x80`\x1F\x10a\x12ZWPPV[`\x1F\x01` \x90\x04\x90_R` _ \x90\x81\x01\x90a\x05=\x91\x90[\x80\x82\x11\x15a\x12\x85W_\x81U`\x01\x01a\x12rV[P\x90V[_` \x82\x84\x03\x12\x15a\x12\x99W__\xFD[P5\x91\x90PV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[\x82\x81R`@` \x82\x01R_a\x12\xE6`@\x83\x01\x84a\x12\xA0V[\x94\x93PPPPV[__\x83`\x1F\x84\x01\x12a\x12\xFEW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\x15W__\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x13/W__\xFD[\x92P\x92\x90PV[____`@\x85\x87\x03\x12\x15a\x13IW__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13_W__\xFD[a\x13k\x87\x82\x88\x01a\x12\xEEV[\x90\x95P\x93PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\x8AW__\xFD[a\x13\x96\x87\x82\x88\x01a\x12\xEEV[\x95\x98\x94\x97P\x95PPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[__`@\x83\x85\x03\x12\x15a\x13\xC7W__\xFD[\x825\x91P` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\xE4W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x13\xF4W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x0EWa\x14\x0Ea\x13\xA2V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x14=Wa\x14=a\x13\xA2V[`@R\x81\x81R\x82\x82\x01` \x01\x87\x10\x15a\x14TW__\xFD[\x81` \x84\x01` \x83\x017_` \x83\x83\x01\x01R\x80\x93PPPP\x92P\x92\x90PV[______``\x87\x89\x03\x12\x15a\x14\x88W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x9EW__\xFD[a\x14\xAA\x89\x82\x8A\x01a\x12\xEEV[\x90\x97P\x95PP` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xC9W__\xFD[a\x14\xD5\x89\x82\x8A\x01a\x12\xEEV[\x90\x95P\x93PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xF4W__\xFD[a\x15\0\x89\x82\x8A\x01a\x12\xEEV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x15(W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x15=W__\xFD[a\x128\x82a\x15\x12V[__`@\x83\x85\x03\x12\x15a\x15WW__\xFD[a\x15`\x83a\x15\x12V[\x91Pa\x15n` \x84\x01a\x15\x12V[\x90P\x92P\x92\x90PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x15\x8BW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x15\xA9WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x15\xD8W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x15\xF2W__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x13/W__\xFD[\x83\x81R``` \x82\x01R_a\x16\x1E``\x83\x01\x85a\x12\xA0V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16`@\x83\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x16FW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x128W__\xFD[_` \x82\x84\x03\x12\x15a\x16eW__\xFD[PQ\x91\x90PV[_\x82a\x16\x86WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[__\x83Ta\x16\x98\x81a\x15wV[`\x01\x82\x16\x80\x15a\x16\xAFW`\x01\x81\x14a\x16\xC4Wa\x16\xF1V[`\xFF\x19\x83\x16\x86R\x81\x15\x15\x82\x02\x86\x01\x93Pa\x16\xF1V[\x86_R` _ _[\x83\x81\x10\x15a\x16\xE9W\x81T\x88\x82\x01R`\x01\x90\x91\x01\x90` \x01a\x16\xCDV[PP\x81\x86\x01\x93P[P\x91\x95\x94PPPPPV[`\x1F\x82\x11\x15a\r\xFEW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x17!WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x04\x05W_\x81U`\x01\x01a\x17-V[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17ZWa\x17Za\x13\xA2V[a\x17n\x81a\x17h\x84Ta\x15wV[\x84a\x16\xFCV[` `\x1F\x82\x11`\x01\x81\x14a\x17\xA3W_\x83\x15a\x17\x89WP\x84\x82\x01Q[`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17[\x85UPa\x04\x05V[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x17\xD2W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x17\xB2V[P\x84\x82\x10\x15a\x17\xEFW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[` \x81R_a\x128` \x83\x01\x84a\x12\xA0V[\x81\x81\x03\x81\x81\x11\x15a\t\xC0WcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03a\x18:WPPV[a\x18D\x82Ta\x15wV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\\Wa\x18\\a\x13\xA2V[a\x18j\x81a\x17h\x84Ta\x15wV[_`\x1F\x82\x11`\x01\x81\x14a\x18\x99W_\x83\x15a\x17\x89WP\x81\x85\x01T`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17a\x17\x9BV[_\x85\x81R` \x80\x82 \x86\x83R\x90\x82 `\x1F\x19\x86\x16\x92[\x83\x81\x10\x15a\x18\xCFW\x82\x86\x01T\x82U`\x01\x95\x86\x01\x95\x90\x91\x01\x90` \x01a\x18\xAFV[P\x85\x83\x10\x15a\x18\xECW\x81\x85\x01T_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 !\x84\x1C\xF9G\x94a\x08W\xB2\x9A\xC0\x10A\x9CK\n:\x8E~\x03\x15|\x0CDHL[\xE5\x18\x90\xDEdsolcC\0\x08\x1E\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610111575f3560e01c8063b05e8ba91161009e578063de626c0e1161006e578063de626c0e14610249578063ee50c7c41461025c578063f11f77f91461026f578063f2fde38b14610278578063fb66ac571461028b575f5ffd5b8063b05e8ba9146101df578063b3544e82146101f2578063ba1cef2314610213578063d85ad04414610226575f5ffd5b80636a3b64b6116100e45780636a3b64b61461018e578063715018a6146101a1578063830c6cc2146101a95780638da5cb5b146101bc5780639b97076f146101cc575f5ffd5b80631a186227146101155780632c3ec80b14610145578063506472cc14610166578063654251eb1461017b575b5f5ffd5b600154610128906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610158610153366004611289565b61029e565b60405161013c9291906112ce565b610179610174366004611336565b610352565b005b6101796101893660046113b6565b61040c565b61017961019c366004611473565b610422565b610179610519565b6101796101b736600461152d565b61052c565b5f546001600160a01b0316610128565b6101796101da3660046113b6565b610540565b6101796101ed366004611336565b610552565b61020561020036600461152d565b610605565b60405190815260200161013c565b610205610221366004611289565b61099e565b610239610234366004611546565b6109bd565b604051901515815260200161013c565b610158610257366004611289565b6109c6565b61017961026a366004611289565b6109d5565b61020560025481565b61017961028636600461152d565b610a31565b610179610299366004611336565b610a70565b600581815481106102ad575f80fd5b5f91825260209091206002909102018054600182018054919350906102d190611577565b80601f01602080910402602001604051908101604052809291908181526020018280546102fd90611577565b80156103485780601f1061031f57610100808354040283529160200191610348565b820191905f5260205f20905b81548152906001019060200180831161032b57829003601f168201915b5050505050905082565b61035a610b23565b82811461037a57604051634885f59b60e01b815260040160405180910390fd5b5f5b83811015610405576103fd858583818110610399576103996115af565b905060200201358484848181106103b2576103b26115af565b90506020028101906103c491906115c3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610b4f92505050565b60010161037c565b5050505050565b610414610b23565b61041e8282610c9a565b5050565b61042a610b23565b84831461044a57604051634885f59b60e01b815260040160405180910390fd5b84811461046a5760405163197910e960e01b815260040160405180910390fd5b5f5b8581101561051057610508878783818110610489576104896115af565b905060200201358686848181106104a2576104a26115af565b90506020028101906104b491906115c3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152508892508791508690508181106104fc576104fc6115af565b90506020020135610e03565b60010161046c565b50505050505050565b610521610b23565b61052a5f610fd3565b565b610534610b23565b61053d81611022565b50565b610548610b23565b61041e8282610b4f565b61055a610b23565b82811461057a57604051634885f59b60e01b815260040160405180910390fd5b5f5b83811015610405576105fd858583818110610599576105996115af565b905060200201358484848181106105b2576105b26115af565b90506020028101906105c491906115c3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061106b92505050565b60010161057c565b5f6002545f0361061657505f919050565b5f805b6005548110156107a1575f60058281548110610637576106376115af565b905f5260205f2090600202016040518060400160405290815f820154815260200160018201805461066790611577565b80601f016020809104026020016040519081016040528092919081815260200182805461069390611577565b80156106de5780601f106106b5576101008083540402835291602001916106de565b820191905f5260205f20905b8154815290600101906020018083116106c157829003601f168201915b505050919092525050600154825160208401516040516396a9cd7d60e01b81529495506001600160a01b03909216936396a9cd7d935061072392908a90600401611606565b602060405180830381865afa15801561073e573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107629190611636565b15610798576107956004838154811061077d5761077d6115af565b905f5260205f2001548461122d90919063ffffffff16565b92505b50600101610619565b5060015460405163f978fff160e01b81526001600160a01b0385811660048301525f92169063f978fff190602401602060405180830381865afa1580156107ea573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061080e9190611655565b9050600254811015610821575092915050565b5f5b600354811015610995575f60038281548110610841576108416115af565b905f5260205f2090600202016040518060400160405290815f820154815260200160018201805461087190611577565b80601f016020809104026020016040519081016040528092919081815260200182805461089d90611577565b80156108e85780601f106108bf576101008083540402835291602001916108e8565b820191905f5260205f20905b8154815290600101906020018083116108cb57829003601f168201915b505050919092525050600154825160208401516040516396a9cd7d60e01b81529495506001600160a01b03909216936396a9cd7d935061092d92908b90600401611606565b602060405180830381865afa158015610948573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061096c9190611636565b1561098c5761098960025484610982919061166c565b859061122d565b93505b50600101610823565b50909392505050565b600481815481106109ad575f80fd5b5f91825260209091200154905081565b60015b92915050565b600381815481106102ad575f80fd5b6109dd610b23565b80600254036109ff576040516320e47b1360e01b815260040160405180910390fd5b600281905560405181907fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe171905f90a250565b610a39610b23565b6001600160a01b038116610a6757604051631e4fbdf760e01b81525f60048201526024015b60405180910390fd5b61053d81610fd3565b610a78610b23565b828114610a9857604051634885f59b60e01b815260040160405180910390fd5b5f5b8381101561040557610b1b858583818110610ab757610ab76115af565b90506020020135848484818110610ad057610ad06115af565b9050602002810190610ae291906115c3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610c9a92505050565b600101610a9a565b5f546001600160a01b0316331461052a5760405163118cdaa760e01b8152336004820152602401610a5e565b5f5b600354811015610bd9578260038281548110610b6f57610b6f6115af565b905f5260205f2090600202015f0154148015610bc75750818051906020012060038281548110610ba157610ba16115af565b905f5260205f209060020201600101604051610bbd919061168b565b6040518091039020145b15610bd157505050565b600101610b51565b506040805180820190915282815260208101828152600380546001810182555f91909152825160029091027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b8101918255915190917fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c0190610c5b9082611740565b505050817f2360ee3e77485441cfa07e30e8dc5b031fac38455647c89a763434f58733fcc182604051610c8e91906117fe565b60405180910390a25050565b5f5b600354811015610dfe578260038281548110610cba57610cba6115af565b905f5260205f2090600202015f0154148015610d125750818051906020012060038281548110610cec57610cec6115af565b905f5260205f209060020201600101604051610d08919061168b565b6040518091039020145b15610df65760038054610d2790600190611810565b81548110610d3757610d376115af565b905f5260205f20906002020160038281548110610d5657610d566115af565b5f91825260209091208254600290920201908155600180820190610d7c9084018261182f565b509050506003805480610d9157610d916118fc565b5f8281526020812060025f199093019283020181815590610db5600183018261123f565b50509055827fb1323e42d97b2b3d45f9d4641bf4b6b3f9d0d01e90832ae7b7413109b7a5d34783604051610de991906117fe565b60405180910390a2505050565b600101610c9c565b505050565b5f5b600554811015610ee7578360058281548110610e2357610e236115af565b905f5260205f2090600202015f0154148015610e7b5750828051906020012060058281548110610e5557610e556115af565b905f5260205f209060020201600101604051610e71919061168b565b6040518091039020145b15610edf578160048281548110610e9457610e946115af565b905f5260205f20018190555081847fe43bf5f5f8a1211930e5726ba0abceacb1748f97b2966db30a818ba10961cbcc85604051610ed191906117fe565b60405180910390a350505050565b600101610e05565b6040805180820190915284815260208101848152600580546001810182555f91909152825160029091027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101918255915190917f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db10190610f689082611740565b5050600480546001810182555f919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0183905550604051829085907fe43bf5f5f8a1211930e5726ba0abceacb1748f97b2966db30a818ba10961cbcc90610ed19087906117fe565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f573bbfa679af6fdcdbd9cf191c5ef3e526599ac2bf75e9177d47adb8530b9c69905f90a250565b5f5b600554811015610dfe57826005828154811061108b5761108b6115af565b905f5260205f2090600202015f01541480156110e357508180519060200120600582815481106110bd576110bd6115af565b905f5260205f2090600202016001016040516110d9919061168b565b6040518091039020145b1561122557600580546110f890600190611810565b81548110611108576111086115af565b905f5260205f20906002020160058281548110611127576111276115af565b5f9182526020909120825460029092020190815560018082019061114d9084018261182f565b509050506005805480611162576111626118fc565b5f8281526020812060025f199093019283020181815590611186600183018261123f565b505090556004805461119a90600190611810565b815481106111aa576111aa6115af565b905f5260205f200154600482815481106111c6576111c66115af565b5f9182526020909120015560048054806111e2576111e26118fc565b600190038181905f5260205f20015f90559055827fdb75199103504bd1d3653de758d4295bf00d4587e1d53dfc114464cc47ed97b783604051610de991906117fe565b60010161106d565b5f8282188284110282185b9392505050565b50805461124b90611577565b5f825580601f1061125a575050565b601f0160209004905f5260205f209081019061053d91905b80821115611285575f8155600101611272565b5090565b5f60208284031215611299575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b828152604060208201525f6112e660408301846112a0565b949350505050565b5f5f83601f8401126112fe575f5ffd5b50813567ffffffffffffffff811115611315575f5ffd5b6020830191508360208260051b850101111561132f575f5ffd5b9250929050565b5f5f5f5f60408587031215611349575f5ffd5b843567ffffffffffffffff81111561135f575f5ffd5b61136b878288016112ee565b909550935050602085013567ffffffffffffffff81111561138a575f5ffd5b611396878288016112ee565b95989497509550505050565b634e487b7160e01b5f52604160045260245ffd5b5f5f604083850312156113c7575f5ffd5b82359150602083013567ffffffffffffffff8111156113e4575f5ffd5b8301601f810185136113f4575f5ffd5b803567ffffffffffffffff81111561140e5761140e6113a2565b604051601f8201601f19908116603f0116810167ffffffffffffffff8111828210171561143d5761143d6113a2565b604052818152828201602001871015611454575f5ffd5b816020840160208301375f602083830101528093505050509250929050565b5f5f5f5f5f5f60608789031215611488575f5ffd5b863567ffffffffffffffff81111561149e575f5ffd5b6114aa89828a016112ee565b909750955050602087013567ffffffffffffffff8111156114c9575f5ffd5b6114d589828a016112ee565b909550935050604087013567ffffffffffffffff8111156114f4575f5ffd5b61150089828a016112ee565b979a9699509497509295939492505050565b80356001600160a01b0381168114611528575f5ffd5b919050565b5f6020828403121561153d575f5ffd5b61123882611512565b5f5f60408385031215611557575f5ffd5b61156083611512565b915061156e60208401611512565b90509250929050565b600181811c9082168061158b57607f821691505b6020821081036115a957634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b5f5f8335601e198436030181126115d8575f5ffd5b83018035915067ffffffffffffffff8211156115f2575f5ffd5b60200191503681900382131561132f575f5ffd5b838152606060208201525f61161e60608301856112a0565b905060018060a01b0383166040830152949350505050565b5f60208284031215611646575f5ffd5b81518015158114611238575f5ffd5b5f60208284031215611665575f5ffd5b5051919050565b5f8261168657634e487b7160e01b5f52601260045260245ffd5b500490565b5f5f835461169881611577565b6001821680156116af57600181146116c4576116f1565b60ff19831686528115158202860193506116f1565b865f5260205f205f5b838110156116e9578154888201526001909101906020016116cd565b505081860193505b509195945050505050565b601f821115610dfe57805f5260205f20601f840160051c810160208510156117215750805b601f840160051c820191505b81811015610405575f815560010161172d565b815167ffffffffffffffff81111561175a5761175a6113a2565b61176e816117688454611577565b846116fc565b6020601f8211600181146117a3575f83156117895750848201515b600184901b5f19600386901b1c198216175b855550610405565b5f84815260208120601f198516915b828110156117d257878501518255602094850194600190920191016117b2565b50848210156117ef57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b602081525f61123860208301846112a0565b818103818111156109c057634e487b7160e01b5f52601160045260245ffd5b81810361183a575050565b6118448254611577565b67ffffffffffffffff81111561185c5761185c6113a2565b61186a816117688454611577565b5f601f821160018114611899575f8315611789575081850154600184901b5f19600386901b1c1982161761179b565b5f8581526020808220868352908220601f198616925b838110156118cf57828601548255600195860195909101906020016118af565b50858310156118ec57818501545f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52603160045260245ffdfea264697066735822122021841cf94794610857b29ac010419c4b0a3a8e7e03157c0c44484c5be51890de64736f6c634300081e0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x01\x11W_5`\xE0\x1C\x80c\xB0^\x8B\xA9\x11a\0\x9EW\x80c\xDEbl\x0E\x11a\0nW\x80c\xDEbl\x0E\x14a\x02IW\x80c\xEEP\xC7\xC4\x14a\x02\\W\x80c\xF1\x1Fw\xF9\x14a\x02oW\x80c\xF2\xFD\xE3\x8B\x14a\x02xW\x80c\xFBf\xACW\x14a\x02\x8BW__\xFD[\x80c\xB0^\x8B\xA9\x14a\x01\xDFW\x80c\xB3TN\x82\x14a\x01\xF2W\x80c\xBA\x1C\xEF#\x14a\x02\x13W\x80c\xD8Z\xD0D\x14a\x02&W__\xFD[\x80cj;d\xB6\x11a\0\xE4W\x80cj;d\xB6\x14a\x01\x8EW\x80cqP\x18\xA6\x14a\x01\xA1W\x80c\x83\x0Cl\xC2\x14a\x01\xA9W\x80c\x8D\xA5\xCB[\x14a\x01\xBCW\x80c\x9B\x97\x07o\x14a\x01\xCCW__\xFD[\x80c\x1A\x18b'\x14a\x01\x15W\x80c,>\xC8\x0B\x14a\x01EW\x80cPdr\xCC\x14a\x01fW\x80ceBQ\xEB\x14a\x01{W[__\xFD[`\x01Ta\x01(\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\x01Xa\x01S6`\x04a\x12\x89V[a\x02\x9EV[`@Qa\x01<\x92\x91\x90a\x12\xCEV[a\x01ya\x01t6`\x04a\x136V[a\x03RV[\0[a\x01ya\x01\x896`\x04a\x13\xB6V[a\x04\x0CV[a\x01ya\x01\x9C6`\x04a\x14sV[a\x04\"V[a\x01ya\x05\x19V[a\x01ya\x01\xB76`\x04a\x15-V[a\x05,V[_T`\x01`\x01`\xA0\x1B\x03\x16a\x01(V[a\x01ya\x01\xDA6`\x04a\x13\xB6V[a\x05@V[a\x01ya\x01\xED6`\x04a\x136V[a\x05RV[a\x02\x05a\x02\x006`\x04a\x15-V[a\x06\x05V[`@Q\x90\x81R` \x01a\x01<V[a\x02\x05a\x02!6`\x04a\x12\x89V[a\t\x9EV[a\x029a\x0246`\x04a\x15FV[a\t\xBDV[`@Q\x90\x15\x15\x81R` \x01a\x01<V[a\x01Xa\x02W6`\x04a\x12\x89V[a\t\xC6V[a\x01ya\x02j6`\x04a\x12\x89V[a\t\xD5V[a\x02\x05`\x02T\x81V[a\x01ya\x02\x866`\x04a\x15-V[a\n1V[a\x01ya\x02\x996`\x04a\x136V[a\npV[`\x05\x81\x81T\x81\x10a\x02\xADW_\x80\xFD[_\x91\x82R` \x90\x91 `\x02\x90\x91\x02\x01\x80T`\x01\x82\x01\x80T\x91\x93P\x90a\x02\xD1\x90a\x15wV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02\xFD\x90a\x15wV[\x80\x15a\x03HW\x80`\x1F\x10a\x03\x1FWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x03HV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x03+W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x82V[a\x03Za\x0B#V[\x82\x81\x14a\x03zW`@QcH\x85\xF5\x9B`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x83\x81\x10\x15a\x04\x05Wa\x03\xFD\x85\x85\x83\x81\x81\x10a\x03\x99Wa\x03\x99a\x15\xAFV[\x90P` \x02\x015\x84\x84\x84\x81\x81\x10a\x03\xB2Wa\x03\xB2a\x15\xAFV[\x90P` \x02\x81\x01\x90a\x03\xC4\x91\x90a\x15\xC3V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0BO\x92PPPV[`\x01\x01a\x03|V[PPPPPV[a\x04\x14a\x0B#V[a\x04\x1E\x82\x82a\x0C\x9AV[PPV[a\x04*a\x0B#V[\x84\x83\x14a\x04JW`@QcH\x85\xF5\x9B`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[\x84\x81\x14a\x04jW`@Qc\x19y\x10\xE9`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x85\x81\x10\x15a\x05\x10Wa\x05\x08\x87\x87\x83\x81\x81\x10a\x04\x89Wa\x04\x89a\x15\xAFV[\x90P` \x02\x015\x86\x86\x84\x81\x81\x10a\x04\xA2Wa\x04\xA2a\x15\xAFV[\x90P` \x02\x81\x01\x90a\x04\xB4\x91\x90a\x15\xC3V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x88\x92P\x87\x91P\x86\x90P\x81\x81\x10a\x04\xFCWa\x04\xFCa\x15\xAFV[\x90P` \x02\x015a\x0E\x03V[`\x01\x01a\x04lV[PPPPPPPV[a\x05!a\x0B#V[a\x05*_a\x0F\xD3V[V[a\x054a\x0B#V[a\x05=\x81a\x10\"V[PV[a\x05Ha\x0B#V[a\x04\x1E\x82\x82a\x0BOV[a\x05Za\x0B#V[\x82\x81\x14a\x05zW`@QcH\x85\xF5\x9B`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x83\x81\x10\x15a\x04\x05Wa\x05\xFD\x85\x85\x83\x81\x81\x10a\x05\x99Wa\x05\x99a\x15\xAFV[\x90P` \x02\x015\x84\x84\x84\x81\x81\x10a\x05\xB2Wa\x05\xB2a\x15\xAFV[\x90P` \x02\x81\x01\x90a\x05\xC4\x91\x90a\x15\xC3V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x10k\x92PPPV[`\x01\x01a\x05|V[_`\x02T_\x03a\x06\x16WP_\x91\x90PV[_\x80[`\x05T\x81\x10\x15a\x07\xA1W_`\x05\x82\x81T\x81\x10a\x067Wa\x067a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`@Q\x80`@\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01\x80Ta\x06g\x90a\x15wV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x06\x93\x90a\x15wV[\x80\x15a\x06\xDEW\x80`\x1F\x10a\x06\xB5Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x06\xDEV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x06\xC1W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPP\x91\x90\x92RPP`\x01T\x82Q` \x84\x01Q`@Qc\x96\xA9\xCD}`\xE0\x1B\x81R\x94\x95P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93c\x96\xA9\xCD}\x93Pa\x07#\x92\x90\x8A\x90`\x04\x01a\x16\x06V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07>W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07b\x91\x90a\x166V[\x15a\x07\x98Wa\x07\x95`\x04\x83\x81T\x81\x10a\x07}Wa\x07}a\x15\xAFV[\x90_R` _ \x01T\x84a\x12-\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x92P[P`\x01\x01a\x06\x19V[P`\x01T`@Qc\xF9x\xFF\xF1`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x81\x16`\x04\x83\x01R_\x92\x16\x90c\xF9x\xFF\xF1\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07\xEAW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\x0E\x91\x90a\x16UV[\x90P`\x02T\x81\x10\x15a\x08!WP\x92\x91PPV[_[`\x03T\x81\x10\x15a\t\x95W_`\x03\x82\x81T\x81\x10a\x08AWa\x08Aa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`@Q\x80`@\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01\x80Ta\x08q\x90a\x15wV[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x08\x9D\x90a\x15wV[\x80\x15a\x08\xE8W\x80`\x1F\x10a\x08\xBFWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x08\xE8V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x08\xCBW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPP\x91\x90\x92RPP`\x01T\x82Q` \x84\x01Q`@Qc\x96\xA9\xCD}`\xE0\x1B\x81R\x94\x95P`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x93c\x96\xA9\xCD}\x93Pa\t-\x92\x90\x8B\x90`\x04\x01a\x16\x06V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\tHW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\tl\x91\x90a\x166V[\x15a\t\x8CWa\t\x89`\x02T\x84a\t\x82\x91\x90a\x16lV[\x85\x90a\x12-V[\x93P[P`\x01\x01a\x08#V[P\x90\x93\x92PPPV[`\x04\x81\x81T\x81\x10a\t\xADW_\x80\xFD[_\x91\x82R` \x90\x91 \x01T\x90P\x81V[`\x01[\x92\x91PPV[`\x03\x81\x81T\x81\x10a\x02\xADW_\x80\xFD[a\t\xDDa\x0B#V[\x80`\x02T\x03a\t\xFFW`@Qc \xE4{\x13`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`\x02\x81\x90U`@Q\x81\x90\x7F\xAD\xFA\x8E\xCB!\xB6\x96.\xBC\xD0\xAD\xBD\x9A\xB9\x85\xB7\xB4\xC5\xB5\xEB;\r\xEA\xD6\x83\x17\x15e\xC7\xBF\xE1q\x90_\x90\xA2PV[a\n9a\x0B#V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\ngW`@Qc\x1EO\xBD\xF7`\xE0\x1B\x81R_`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[a\x05=\x81a\x0F\xD3V[a\nxa\x0B#V[\x82\x81\x14a\n\x98W`@QcH\x85\xF5\x9B`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[_[\x83\x81\x10\x15a\x04\x05Wa\x0B\x1B\x85\x85\x83\x81\x81\x10a\n\xB7Wa\n\xB7a\x15\xAFV[\x90P` \x02\x015\x84\x84\x84\x81\x81\x10a\n\xD0Wa\n\xD0a\x15\xAFV[\x90P` \x02\x81\x01\x90a\n\xE2\x91\x90a\x15\xC3V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPa\x0C\x9A\x92PPPV[`\x01\x01a\n\x9AV[_T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x05*W`@Qc\x11\x8C\xDA\xA7`\xE0\x1B\x81R3`\x04\x82\x01R`$\x01a\n^V[_[`\x03T\x81\x10\x15a\x0B\xD9W\x82`\x03\x82\x81T\x81\x10a\x0BoWa\x0Boa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01_\x01T\x14\x80\x15a\x0B\xC7WP\x81\x80Q\x90` \x01 `\x03\x82\x81T\x81\x10a\x0B\xA1Wa\x0B\xA1a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x01\x01`@Qa\x0B\xBD\x91\x90a\x16\x8BV[`@Q\x80\x91\x03\x90 \x14[\x15a\x0B\xD1WPPPV[`\x01\x01a\x0BQV[P`@\x80Q\x80\x82\x01\x90\x91R\x82\x81R` \x81\x01\x82\x81R`\x03\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x82Q`\x02\x90\x91\x02\x7F\xC2WZ\x0E\x9EY<\0\xF9Y\xF8\xC9/\x12\xDB(i\xC39Z;\x05\x02\xD0^%\x16Doq\xF8[\x81\x01\x91\x82U\x91Q\x90\x91\x7F\xC2WZ\x0E\x9EY<\0\xF9Y\xF8\xC9/\x12\xDB(i\xC39Z;\x05\x02\xD0^%\x16Doq\xF8\\\x01\x90a\x0C[\x90\x82a\x17@V[PPP\x81\x7F#`\xEE>wHTA\xCF\xA0~0\xE8\xDC[\x03\x1F\xAC8EVG\xC8\x9Av44\xF5\x873\xFC\xC1\x82`@Qa\x0C\x8E\x91\x90a\x17\xFEV[`@Q\x80\x91\x03\x90\xA2PPV[_[`\x03T\x81\x10\x15a\r\xFEW\x82`\x03\x82\x81T\x81\x10a\x0C\xBAWa\x0C\xBAa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01_\x01T\x14\x80\x15a\r\x12WP\x81\x80Q\x90` \x01 `\x03\x82\x81T\x81\x10a\x0C\xECWa\x0C\xECa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x01\x01`@Qa\r\x08\x91\x90a\x16\x8BV[`@Q\x80\x91\x03\x90 \x14[\x15a\r\xF6W`\x03\x80Ta\r'\x90`\x01\x90a\x18\x10V[\x81T\x81\x10a\r7Wa\r7a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x03\x82\x81T\x81\x10a\rVWa\rVa\x15\xAFV[_\x91\x82R` \x90\x91 \x82T`\x02\x90\x92\x02\x01\x90\x81U`\x01\x80\x82\x01\x90a\r|\x90\x84\x01\x82a\x18/V[P\x90PP`\x03\x80T\x80a\r\x91Wa\r\x91a\x18\xFCV[_\x82\x81R` \x81 `\x02_\x19\x90\x93\x01\x92\x83\x02\x01\x81\x81U\x90a\r\xB5`\x01\x83\x01\x82a\x12?V[PP\x90U\x82\x7F\xB12>B\xD9{+=E\xF9\xD4d\x1B\xF4\xB6\xB3\xF9\xD0\xD0\x1E\x90\x83*\xE7\xB7A1\t\xB7\xA5\xD3G\x83`@Qa\r\xE9\x91\x90a\x17\xFEV[`@Q\x80\x91\x03\x90\xA2PPPV[`\x01\x01a\x0C\x9CV[PPPV[_[`\x05T\x81\x10\x15a\x0E\xE7W\x83`\x05\x82\x81T\x81\x10a\x0E#Wa\x0E#a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01_\x01T\x14\x80\x15a\x0E{WP\x82\x80Q\x90` \x01 `\x05\x82\x81T\x81\x10a\x0EUWa\x0EUa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x01\x01`@Qa\x0Eq\x91\x90a\x16\x8BV[`@Q\x80\x91\x03\x90 \x14[\x15a\x0E\xDFW\x81`\x04\x82\x81T\x81\x10a\x0E\x94Wa\x0E\x94a\x15\xAFV[\x90_R` _ \x01\x81\x90UP\x81\x84\x7F\xE4;\xF5\xF5\xF8\xA1!\x190\xE5rk\xA0\xAB\xCE\xAC\xB1t\x8F\x97\xB2\x96m\xB3\n\x81\x8B\xA1\ta\xCB\xCC\x85`@Qa\x0E\xD1\x91\x90a\x17\xFEV[`@Q\x80\x91\x03\x90\xA3PPPPV[`\x01\x01a\x0E\x05V[`@\x80Q\x80\x82\x01\x90\x91R\x84\x81R` \x81\x01\x84\x81R`\x05\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x82Q`\x02\x90\x91\x02\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x81\x01\x91\x82U\x91Q\x90\x91\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB1\x01\x90a\x0Fh\x90\x82a\x17@V[PP`\x04\x80T`\x01\x81\x01\x82U_\x91\x90\x91R\x7F\x8A5\xAC\xFB\xC1_\xF8\x1A9\xAE}4O\xD7\t\xF2\x8E\x86\0\xB4\xAA\x8Ce\xC6\xB6K\xFE\x7F\xE3k\xD1\x9B\x01\x83\x90UP`@Q\x82\x90\x85\x90\x7F\xE4;\xF5\xF5\xF8\xA1!\x190\xE5rk\xA0\xAB\xCE\xAC\xB1t\x8F\x97\xB2\x96m\xB3\n\x81\x8B\xA1\ta\xCB\xCC\x90a\x0E\xD1\x90\x87\x90a\x17\xFEV[_\x80T`\x01`\x01`\xA0\x1B\x03\x83\x81\x16`\x01`\x01`\xA0\x1B\x03\x19\x83\x16\x81\x17\x84U`@Q\x91\x90\x92\x16\x92\x83\x91\x7F\x8B\xE0\x07\x9CS\x16Y\x14\x13D\xCD\x1F\xD0\xA4\xF2\x84\x19I\x7F\x97\"\xA3\xDA\xAF\xE3\xB4\x18okdW\xE0\x91\x90\xA3PPV[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x83\x16\x90\x81\x17\x90\x91U`@Q\x7FW;\xBF\xA6y\xAFo\xDC\xDB\xD9\xCF\x19\x1C^\xF3\xE5&Y\x9A\xC2\xBFu\xE9\x17}G\xAD\xB8S\x0B\x9Ci\x90_\x90\xA2PV[_[`\x05T\x81\x10\x15a\r\xFEW\x82`\x05\x82\x81T\x81\x10a\x10\x8BWa\x10\x8Ba\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01_\x01T\x14\x80\x15a\x10\xE3WP\x81\x80Q\x90` \x01 `\x05\x82\x81T\x81\x10a\x10\xBDWa\x10\xBDa\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x01\x01`@Qa\x10\xD9\x91\x90a\x16\x8BV[`@Q\x80\x91\x03\x90 \x14[\x15a\x12%W`\x05\x80Ta\x10\xF8\x90`\x01\x90a\x18\x10V[\x81T\x81\x10a\x11\x08Wa\x11\x08a\x15\xAFV[\x90_R` _ \x90`\x02\x02\x01`\x05\x82\x81T\x81\x10a\x11'Wa\x11'a\x15\xAFV[_\x91\x82R` \x90\x91 \x82T`\x02\x90\x92\x02\x01\x90\x81U`\x01\x80\x82\x01\x90a\x11M\x90\x84\x01\x82a\x18/V[P\x90PP`\x05\x80T\x80a\x11bWa\x11ba\x18\xFCV[_\x82\x81R` \x81 `\x02_\x19\x90\x93\x01\x92\x83\x02\x01\x81\x81U\x90a\x11\x86`\x01\x83\x01\x82a\x12?V[PP\x90U`\x04\x80Ta\x11\x9A\x90`\x01\x90a\x18\x10V[\x81T\x81\x10a\x11\xAAWa\x11\xAAa\x15\xAFV[\x90_R` _ \x01T`\x04\x82\x81T\x81\x10a\x11\xC6Wa\x11\xC6a\x15\xAFV[_\x91\x82R` \x90\x91 \x01U`\x04\x80T\x80a\x11\xE2Wa\x11\xE2a\x18\xFCV[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90U\x82\x7F\xDBu\x19\x91\x03PK\xD1\xD3e=\xE7X\xD4)[\xF0\rE\x87\xE1\xD5=\xFC\x11Dd\xCCG\xED\x97\xB7\x83`@Qa\r\xE9\x91\x90a\x17\xFEV[`\x01\x01a\x10mV[_\x82\x82\x18\x82\x84\x11\x02\x82\x18[\x93\x92PPPV[P\x80Ta\x12K\x90a\x15wV[_\x82U\x80`\x1F\x10a\x12ZWPPV[`\x1F\x01` \x90\x04\x90_R` _ \x90\x81\x01\x90a\x05=\x91\x90[\x80\x82\x11\x15a\x12\x85W_\x81U`\x01\x01a\x12rV[P\x90V[_` \x82\x84\x03\x12\x15a\x12\x99W__\xFD[P5\x91\x90PV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[\x82\x81R`@` \x82\x01R_a\x12\xE6`@\x83\x01\x84a\x12\xA0V[\x94\x93PPPPV[__\x83`\x1F\x84\x01\x12a\x12\xFEW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\x15W__\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a\x13/W__\xFD[\x92P\x92\x90PV[____`@\x85\x87\x03\x12\x15a\x13IW__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13_W__\xFD[a\x13k\x87\x82\x88\x01a\x12\xEEV[\x90\x95P\x93PP` \x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\x8AW__\xFD[a\x13\x96\x87\x82\x88\x01a\x12\xEEV[\x95\x98\x94\x97P\x95PPPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[__`@\x83\x85\x03\x12\x15a\x13\xC7W__\xFD[\x825\x91P` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x13\xE4W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x13\xF4W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x0EWa\x14\x0Ea\x13\xA2V[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x14=Wa\x14=a\x13\xA2V[`@R\x81\x81R\x82\x82\x01` \x01\x87\x10\x15a\x14TW__\xFD[\x81` \x84\x01` \x83\x017_` \x83\x83\x01\x01R\x80\x93PPPP\x92P\x92\x90PV[______``\x87\x89\x03\x12\x15a\x14\x88W__\xFD[\x865g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x9EW__\xFD[a\x14\xAA\x89\x82\x8A\x01a\x12\xEEV[\x90\x97P\x95PP` \x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xC9W__\xFD[a\x14\xD5\x89\x82\x8A\x01a\x12\xEEV[\x90\x95P\x93PP`@\x87\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\xF4W__\xFD[a\x15\0\x89\x82\x8A\x01a\x12\xEEV[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x15(W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x15=W__\xFD[a\x128\x82a\x15\x12V[__`@\x83\x85\x03\x12\x15a\x15WW__\xFD[a\x15`\x83a\x15\x12V[\x91Pa\x15n` \x84\x01a\x15\x12V[\x90P\x92P\x92\x90PV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x15\x8BW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x15\xA9WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[__\x835`\x1E\x19\x846\x03\x01\x81\x12a\x15\xD8W__\xFD[\x83\x01\x805\x91Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x15\xF2W__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a\x13/W__\xFD[\x83\x81R``` \x82\x01R_a\x16\x1E``\x83\x01\x85a\x12\xA0V[\x90P`\x01\x80`\xA0\x1B\x03\x83\x16`@\x83\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x16FW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x128W__\xFD[_` \x82\x84\x03\x12\x15a\x16eW__\xFD[PQ\x91\x90PV[_\x82a\x16\x86WcNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[P\x04\x90V[__\x83Ta\x16\x98\x81a\x15wV[`\x01\x82\x16\x80\x15a\x16\xAFW`\x01\x81\x14a\x16\xC4Wa\x16\xF1V[`\xFF\x19\x83\x16\x86R\x81\x15\x15\x82\x02\x86\x01\x93Pa\x16\xF1V[\x86_R` _ _[\x83\x81\x10\x15a\x16\xE9W\x81T\x88\x82\x01R`\x01\x90\x91\x01\x90` \x01a\x16\xCDV[PP\x81\x86\x01\x93P[P\x91\x95\x94PPPPPV[`\x1F\x82\x11\x15a\r\xFEW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x17!WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x04\x05W_\x81U`\x01\x01a\x17-V[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x17ZWa\x17Za\x13\xA2V[a\x17n\x81a\x17h\x84Ta\x15wV[\x84a\x16\xFCV[` `\x1F\x82\x11`\x01\x81\x14a\x17\xA3W_\x83\x15a\x17\x89WP\x84\x82\x01Q[`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17[\x85UPa\x04\x05V[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x17\xD2W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x17\xB2V[P\x84\x82\x10\x15a\x17\xEFW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[` \x81R_a\x128` \x83\x01\x84a\x12\xA0V[\x81\x81\x03\x81\x81\x11\x15a\t\xC0WcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03a\x18:WPPV[a\x18D\x82Ta\x15wV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x18\\Wa\x18\\a\x13\xA2V[a\x18j\x81a\x17h\x84Ta\x15wV[_`\x1F\x82\x11`\x01\x81\x14a\x18\x99W_\x83\x15a\x17\x89WP\x81\x85\x01T`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17a\x17\x9BV[_\x85\x81R` \x80\x82 \x86\x83R\x90\x82 `\x1F\x19\x86\x16\x92[\x83\x81\x10\x15a\x18\xCFW\x82\x86\x01T\x82U`\x01\x95\x86\x01\x95\x90\x91\x01\x90` \x01a\x18\xAFV[P\x85\x83\x10\x15a\x18\xECW\x81\x85\x01T_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD\xFE\xA2dipfsX\"\x12 !\x84\x1C\xF9G\x94a\x08W\xB2\x9A\xC0\x10A\x9CK\n:\x8E~\x03\x15|\x0CDHL[\xE5\x18\x90\xDEdsolcC\0\x08\x1E\x003",
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `MaxRegistrationsMismatch()` and selector `0x197910e9`.
```solidity
error MaxRegistrationsMismatch();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct MaxRegistrationsMismatch;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<MaxRegistrationsMismatch>
        for UnderlyingRustTuple<'_> {
            fn from(value: MaxRegistrationsMismatch) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for MaxRegistrationsMismatch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for MaxRegistrationsMismatch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "MaxRegistrationsMismatch()";
            const SELECTOR: [u8; 4] = [25u8, 121u8, 16u8, 233u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `NftRanksMismatch()` and selector `0x4885f59b`.
```solidity
error NftRanksMismatch();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct NftRanksMismatch;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<NftRanksMismatch> for UnderlyingRustTuple<'_> {
            fn from(value: NftRanksMismatch) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for NftRanksMismatch {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for NftRanksMismatch {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "NftRanksMismatch()";
            const SELECTOR: [u8; 4] = [72u8, 133u8, 245u8, 155u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableInvalidOwner(address)` and selector `0x1e4fbdf7`.
```solidity
error OwnableInvalidOwner(address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableInvalidOwner {
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableInvalidOwner> for UnderlyingRustTuple<'_> {
            fn from(value: OwnableInvalidOwner) -> Self {
                (value.owner,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OwnableInvalidOwner {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { owner: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableInvalidOwner {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableInvalidOwner(address)";
            const SELECTOR: [u8; 4] = [30u8, 79u8, 189u8, 247u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `OwnableUnauthorizedAccount(address)` and selector `0x118cdaa7`.
```solidity
error OwnableUnauthorizedAccount(address account);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OwnableUnauthorizedAccount {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OwnableUnauthorizedAccount>
        for UnderlyingRustTuple<'_> {
            fn from(value: OwnableUnauthorizedAccount) -> Self {
                (value.account,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for OwnableUnauthorizedAccount {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { account: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for OwnableUnauthorizedAccount {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "OwnableUnauthorizedAccount(address)";
            const SELECTOR: [u8; 4] = [17u8, 140u8, 218u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `SameStakingThreshold()` and selector `0x20e47b13`.
```solidity
error SameStakingThreshold();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct SameStakingThreshold;
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<SameStakingThreshold> for UnderlyingRustTuple<'_> {
            fn from(value: SameStakingThreshold) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for SameStakingThreshold {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for SameStakingThreshold {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "SameStakingThreshold()";
            const SELECTOR: [u8; 4] = [32u8, 228u8, 123u8, 19u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Custom error with signature `ZeroAddress(string)` and selector `0xeac0d389`.
```solidity
error ZeroAddress(string reason);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ZeroAddress {
        #[allow(missing_docs)]
        pub reason: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        #[allow(dead_code)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ZeroAddress> for UnderlyingRustTuple<'_> {
            fn from(value: ZeroAddress) -> Self {
                (value.reason,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ZeroAddress {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { reason: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ZeroAddress {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ZeroAddress(string)";
            const SELECTOR: [u8; 4] = [234u8, 192u8, 211u8, 137u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.reason,
                    ),
                )
            }
            #[inline]
            fn abi_decode_raw_validate(data: &[u8]) -> alloy_sol_types::Result<Self> {
                <Self::Parameters<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Self::new)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `NftTypeAndRankAdded(uint256,string)` and selector `0x2360ee3e77485441cfa07e30e8dc5b031fac38455647c89a763434f58733fcc1`.
```solidity
event NftTypeAndRankAdded(uint256 indexed nftType, string nftRank);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NftTypeAndRankAdded {
        #[allow(missing_docs)]
        pub nftType: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nftRank: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NftTypeAndRankAdded {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "NftTypeAndRankAdded(uint256,string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                35u8, 96u8, 238u8, 62u8, 119u8, 72u8, 84u8, 65u8, 207u8, 160u8, 126u8,
                48u8, 232u8, 220u8, 91u8, 3u8, 31u8, 172u8, 56u8, 69u8, 86u8, 71u8,
                200u8, 154u8, 118u8, 52u8, 52u8, 245u8, 135u8, 51u8, 252u8, 193u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    nftType: topics.1,
                    nftRank: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.nftRank,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.nftType.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.nftType);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NftTypeAndRankAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NftTypeAndRankAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NftTypeAndRankAdded) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `NftTypeAndRankRemoved(uint256,string)` and selector `0xb1323e42d97b2b3d45f9d4641bf4b6b3f9d0d01e90832ae7b7413109b7a5d347`.
```solidity
event NftTypeAndRankRemoved(uint256 indexed nftType, string nftRank);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct NftTypeAndRankRemoved {
        #[allow(missing_docs)]
        pub nftType: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nftRank: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for NftTypeAndRankRemoved {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "NftTypeAndRankRemoved(uint256,string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                177u8, 50u8, 62u8, 66u8, 217u8, 123u8, 43u8, 61u8, 69u8, 249u8, 212u8,
                100u8, 27u8, 244u8, 182u8, 179u8, 249u8, 208u8, 208u8, 30u8, 144u8,
                131u8, 42u8, 231u8, 183u8, 65u8, 49u8, 9u8, 183u8, 165u8, 211u8, 71u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    nftType: topics.1,
                    nftRank: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.nftRank,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.nftType.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.nftType);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for NftTypeAndRankRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&NftTypeAndRankRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &NftTypeAndRankRemoved) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `OwnershipTransferred(address,address)` and selector `0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0`.
```solidity
event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct OwnershipTransferred {
        #[allow(missing_docs)]
        pub previousOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for OwnershipTransferred {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "OwnershipTransferred(address,address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    previousOwner: topics.1,
                    newOwner: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.previousOwner.clone(),
                    self.newOwner.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.previousOwner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.newOwner,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for OwnershipTransferred {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&OwnershipTransferred> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &OwnershipTransferred) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SpecialNftTypeAndRankAdded(uint256,string,uint256)` and selector `0xe43bf5f5f8a1211930e5726ba0abceacb1748f97b2966db30a818ba10961cbcc`.
```solidity
event SpecialNftTypeAndRankAdded(uint256 indexed nftType, string nftRank, uint256 indexed maxRegistration);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SpecialNftTypeAndRankAdded {
        #[allow(missing_docs)]
        pub nftType: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nftRank: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub maxRegistration: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SpecialNftTypeAndRankAdded {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "SpecialNftTypeAndRankAdded(uint256,string,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8, 59u8, 245u8, 245u8, 248u8, 161u8, 33u8, 25u8, 48u8, 229u8, 114u8,
                107u8, 160u8, 171u8, 206u8, 172u8, 177u8, 116u8, 143u8, 151u8, 178u8,
                150u8, 109u8, 179u8, 10u8, 129u8, 139u8, 161u8, 9u8, 97u8, 203u8, 204u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    nftType: topics.1,
                    nftRank: data.0,
                    maxRegistration: topics.2,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.nftRank,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.nftType.clone(),
                    self.maxRegistration.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.nftType);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.maxRegistration);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SpecialNftTypeAndRankAdded {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SpecialNftTypeAndRankAdded> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SpecialNftTypeAndRankAdded,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `SpecialNftTypeAndRankRemoved(uint256,string)` and selector `0xdb75199103504bd1d3653de758d4295bf00d4587e1d53dfc114464cc47ed97b7`.
```solidity
event SpecialNftTypeAndRankRemoved(uint256 indexed nftType, string nftRank);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SpecialNftTypeAndRankRemoved {
        #[allow(missing_docs)]
        pub nftType: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nftRank: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SpecialNftTypeAndRankRemoved {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "SpecialNftTypeAndRankRemoved(uint256,string)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                219u8, 117u8, 25u8, 145u8, 3u8, 80u8, 75u8, 209u8, 211u8, 101u8, 61u8,
                231u8, 88u8, 212u8, 41u8, 91u8, 240u8, 13u8, 69u8, 135u8, 225u8, 213u8,
                61u8, 252u8, 17u8, 68u8, 100u8, 204u8, 71u8, 237u8, 151u8, 183u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    nftType: topics.1,
                    nftRank: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.nftRank,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.nftType.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.nftType);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SpecialNftTypeAndRankRemoved {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SpecialNftTypeAndRankRemoved> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(
                this: &SpecialNftTypeAndRankRemoved,
            ) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `StakeContractUpdated(address)` and selector `0x573bbfa679af6fdcdbd9cf191c5ef3e526599ac2bf75e9177d47adb8530b9c69`.
```solidity
event StakeContractUpdated(address indexed stakeContract);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct StakeContractUpdated {
        #[allow(missing_docs)]
        pub stakeContract: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for StakeContractUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "StakeContractUpdated(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                87u8, 59u8, 191u8, 166u8, 121u8, 175u8, 111u8, 220u8, 219u8, 217u8,
                207u8, 25u8, 28u8, 94u8, 243u8, 229u8, 38u8, 89u8, 154u8, 194u8, 191u8,
                117u8, 233u8, 23u8, 125u8, 71u8, 173u8, 184u8, 83u8, 11u8, 156u8, 105u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { stakeContract: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.stakeContract.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.stakeContract,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for StakeContractUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&StakeContractUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &StakeContractUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Event with signature `ThresholdUpdated(uint256)` and selector `0xadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe171`.
```solidity
event ThresholdUpdated(uint256 indexed threshold);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ThresholdUpdated {
        #[allow(missing_docs)]
        pub threshold: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ThresholdUpdated {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "ThresholdUpdated(uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                173u8, 250u8, 142u8, 203u8, 33u8, 182u8, 150u8, 46u8, 188u8, 208u8,
                173u8, 189u8, 154u8, 185u8, 133u8, 183u8, 180u8, 197u8, 181u8, 235u8,
                59u8, 13u8, 234u8, 214u8, 131u8, 23u8, 21u8, 101u8, 199u8, 191u8, 225u8,
                113u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { threshold: topics.1 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.threshold.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.threshold);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ThresholdUpdated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ThresholdUpdated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ThresholdUpdated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address _stakeContract, address _newOwner, uint256 _minStake);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub _stakeContract: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _newOwner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _minStake: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value._stakeContract, value._newOwner, value._minStake)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _stakeContract: tuple.0,
                        _newOwner: tuple.1,
                        _minStake: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._stakeContract,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._newOwner,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._minStake),
                )
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `canOperateFor(address,address)` and selector `0xd85ad044`.
```solidity
function canOperateFor(address, address) external pure returns (bool eligiblity);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct canOperateForCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _1: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`canOperateFor(address,address)`](canOperateForCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct canOperateForReturn {
        #[allow(missing_docs)]
        pub eligiblity: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<canOperateForCall> for UnderlyingRustTuple<'_> {
                fn from(value: canOperateForCall) -> Self {
                    (value._0, value._1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for canOperateForCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0, _1: tuple.1 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<canOperateForReturn> for UnderlyingRustTuple<'_> {
                fn from(value: canOperateForReturn) -> Self {
                    (value.eligiblity,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for canOperateForReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { eligiblity: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for canOperateForCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = bool;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "canOperateFor(address,address)";
            const SELECTOR: [u8; 4] = [216u8, 90u8, 208u8, 68u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: canOperateForReturn = r.into();
                        r.eligiblity
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: canOperateForReturn = r.into();
                        r.eligiblity
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `eligibleNftTypeAndRank(uint256)` and selector `0xde626c0e`.
```solidity
function eligibleNftTypeAndRank(uint256) external view returns (uint256 nftType, string memory nftRank);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct eligibleNftTypeAndRankCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`eligibleNftTypeAndRank(uint256)`](eligibleNftTypeAndRankCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct eligibleNftTypeAndRankReturn {
        #[allow(missing_docs)]
        pub nftType: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nftRank: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eligibleNftTypeAndRankCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: eligibleNftTypeAndRankCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for eligibleNftTypeAndRankCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<eligibleNftTypeAndRankReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: eligibleNftTypeAndRankReturn) -> Self {
                    (value.nftType, value.nftRank)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for eligibleNftTypeAndRankReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        nftType: tuple.0,
                        nftRank: tuple.1,
                    }
                }
            }
        }
        impl eligibleNftTypeAndRankReturn {
            fn _tokenize(
                &self,
            ) -> <eligibleNftTypeAndRankCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftType),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.nftRank,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for eligibleNftTypeAndRankCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = eligibleNftTypeAndRankReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "eligibleNftTypeAndRank(uint256)";
            const SELECTOR: [u8; 4] = [222u8, 98u8, 108u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                eligibleNftTypeAndRankReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `maxAllowedRegistrations(address)` and selector `0xb3544e82`.
```solidity
function maxAllowedRegistrations(address account) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxAllowedRegistrationsCall {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
    }
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`maxAllowedRegistrations(address)`](maxAllowedRegistrationsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxAllowedRegistrationsReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxAllowedRegistrationsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxAllowedRegistrationsCall) -> Self {
                    (value.account,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxAllowedRegistrationsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { account: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxAllowedRegistrationsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxAllowedRegistrationsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxAllowedRegistrationsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxAllowedRegistrationsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxAllowedRegistrations(address)";
            const SELECTOR: [u8; 4] = [179u8, 84u8, 78u8, 130u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: maxAllowedRegistrationsReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: maxAllowedRegistrationsReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `maxRegistrationsPerSpecialNft(uint256)` and selector `0xba1cef23`.
```solidity
function maxRegistrationsPerSpecialNft(uint256) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxRegistrationsPerSpecialNftCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`maxRegistrationsPerSpecialNft(uint256)`](maxRegistrationsPerSpecialNftCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct maxRegistrationsPerSpecialNftReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxRegistrationsPerSpecialNftCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxRegistrationsPerSpecialNftCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxRegistrationsPerSpecialNftCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<maxRegistrationsPerSpecialNftReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: maxRegistrationsPerSpecialNftReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for maxRegistrationsPerSpecialNftReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for maxRegistrationsPerSpecialNftCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "maxRegistrationsPerSpecialNft(uint256)";
            const SELECTOR: [u8; 4] = [186u8, 28u8, 239u8, 35u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: maxRegistrationsPerSpecialNftReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: maxRegistrationsPerSpecialNftReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: ownerReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `ownerAddNftTypeAndRank(uint256,string)` and selector `0x9b97076f`.
```solidity
function ownerAddNftTypeAndRank(uint256 nftType, string memory nftRank) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerAddNftTypeAndRankCall {
        #[allow(missing_docs)]
        pub nftType: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nftRank: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`ownerAddNftTypeAndRank(uint256,string)`](ownerAddNftTypeAndRankCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerAddNftTypeAndRankReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerAddNftTypeAndRankCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerAddNftTypeAndRankCall) -> Self {
                    (value.nftType, value.nftRank)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerAddNftTypeAndRankCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        nftType: tuple.0,
                        nftRank: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerAddNftTypeAndRankReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerAddNftTypeAndRankReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerAddNftTypeAndRankReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl ownerAddNftTypeAndRankReturn {
            fn _tokenize(
                &self,
            ) -> <ownerAddNftTypeAndRankCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerAddNftTypeAndRankCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerAddNftTypeAndRankReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerAddNftTypeAndRank(uint256,string)";
            const SELECTOR: [u8; 4] = [155u8, 151u8, 7u8, 111u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftType),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.nftRank,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                ownerAddNftTypeAndRankReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `ownerBatchAddNftTypeAndRank(uint256[],string[])` and selector `0x506472cc`.
```solidity
function ownerBatchAddNftTypeAndRank(uint256[] memory nftTypes, string[] memory nftRanks) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerBatchAddNftTypeAndRankCall {
        #[allow(missing_docs)]
        pub nftTypes: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub nftRanks: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
    }
    ///Container type for the return parameters of the [`ownerBatchAddNftTypeAndRank(uint256[],string[])`](ownerBatchAddNftTypeAndRankCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerBatchAddNftTypeAndRankReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerBatchAddNftTypeAndRankCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerBatchAddNftTypeAndRankCall) -> Self {
                    (value.nftTypes, value.nftRanks)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerBatchAddNftTypeAndRankCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        nftTypes: tuple.0,
                        nftRanks: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerBatchAddNftTypeAndRankReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerBatchAddNftTypeAndRankReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerBatchAddNftTypeAndRankReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl ownerBatchAddNftTypeAndRankReturn {
            fn _tokenize(
                &self,
            ) -> <ownerBatchAddNftTypeAndRankCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerBatchAddNftTypeAndRankCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerBatchAddNftTypeAndRankReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerBatchAddNftTypeAndRank(uint256[],string[])";
            const SELECTOR: [u8; 4] = [80u8, 100u8, 114u8, 204u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftTypes),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::String,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftRanks),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                ownerBatchAddNftTypeAndRankReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `ownerBatchAddSpecialNftTypeAndRank(uint256[],string[],uint256[])` and selector `0x6a3b64b6`.
```solidity
function ownerBatchAddSpecialNftTypeAndRank(uint256[] memory nftTypes, string[] memory nftRanks, uint256[] memory maxRegistrations) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerBatchAddSpecialNftTypeAndRankCall {
        #[allow(missing_docs)]
        pub nftTypes: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub nftRanks: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
        #[allow(missing_docs)]
        pub maxRegistrations: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`ownerBatchAddSpecialNftTypeAndRank(uint256[],string[],uint256[])`](ownerBatchAddSpecialNftTypeAndRankCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerBatchAddSpecialNftTypeAndRankReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerBatchAddSpecialNftTypeAndRankCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerBatchAddSpecialNftTypeAndRankCall) -> Self {
                    (value.nftTypes, value.nftRanks, value.maxRegistrations)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerBatchAddSpecialNftTypeAndRankCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        nftTypes: tuple.0,
                        nftRanks: tuple.1,
                        maxRegistrations: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerBatchAddSpecialNftTypeAndRankReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerBatchAddSpecialNftTypeAndRankReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerBatchAddSpecialNftTypeAndRankReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl ownerBatchAddSpecialNftTypeAndRankReturn {
            fn _tokenize(
                &self,
            ) -> <ownerBatchAddSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerBatchAddSpecialNftTypeAndRankCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerBatchAddSpecialNftTypeAndRankReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerBatchAddSpecialNftTypeAndRank(uint256[],string[],uint256[])";
            const SELECTOR: [u8; 4] = [106u8, 59u8, 100u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftTypes),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::String,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftRanks),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.maxRegistrations),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                ownerBatchAddSpecialNftTypeAndRankReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `ownerBatchRemoveNftTypeAndRank(uint256[],string[])` and selector `0xfb66ac57`.
```solidity
function ownerBatchRemoveNftTypeAndRank(uint256[] memory nftTypes, string[] memory nftRanks) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerBatchRemoveNftTypeAndRankCall {
        #[allow(missing_docs)]
        pub nftTypes: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub nftRanks: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
    }
    ///Container type for the return parameters of the [`ownerBatchRemoveNftTypeAndRank(uint256[],string[])`](ownerBatchRemoveNftTypeAndRankCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerBatchRemoveNftTypeAndRankReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerBatchRemoveNftTypeAndRankCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerBatchRemoveNftTypeAndRankCall) -> Self {
                    (value.nftTypes, value.nftRanks)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerBatchRemoveNftTypeAndRankCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        nftTypes: tuple.0,
                        nftRanks: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerBatchRemoveNftTypeAndRankReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerBatchRemoveNftTypeAndRankReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerBatchRemoveNftTypeAndRankReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl ownerBatchRemoveNftTypeAndRankReturn {
            fn _tokenize(
                &self,
            ) -> <ownerBatchRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerBatchRemoveNftTypeAndRankCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerBatchRemoveNftTypeAndRankReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerBatchRemoveNftTypeAndRank(uint256[],string[])";
            const SELECTOR: [u8; 4] = [251u8, 102u8, 172u8, 87u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftTypes),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::String,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftRanks),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                ownerBatchRemoveNftTypeAndRankReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `ownerBatchRemoveSpecialNftTypeAndRank(uint256[],string[])` and selector `0xb05e8ba9`.
```solidity
function ownerBatchRemoveSpecialNftTypeAndRank(uint256[] memory nftTypes, string[] memory nftRanks) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerBatchRemoveSpecialNftTypeAndRankCall {
        #[allow(missing_docs)]
        pub nftTypes: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub nftRanks: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
    }
    ///Container type for the return parameters of the [`ownerBatchRemoveSpecialNftTypeAndRank(uint256[],string[])`](ownerBatchRemoveSpecialNftTypeAndRankCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerBatchRemoveSpecialNftTypeAndRankReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerBatchRemoveSpecialNftTypeAndRankCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerBatchRemoveSpecialNftTypeAndRankCall) -> Self {
                    (value.nftTypes, value.nftRanks)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerBatchRemoveSpecialNftTypeAndRankCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        nftTypes: tuple.0,
                        nftRanks: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerBatchRemoveSpecialNftTypeAndRankReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerBatchRemoveSpecialNftTypeAndRankReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerBatchRemoveSpecialNftTypeAndRankReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl ownerBatchRemoveSpecialNftTypeAndRankReturn {
            fn _tokenize(
                &self,
            ) -> <ownerBatchRemoveSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerBatchRemoveSpecialNftTypeAndRankCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::String>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerBatchRemoveSpecialNftTypeAndRankReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerBatchRemoveSpecialNftTypeAndRank(uint256[],string[])";
            const SELECTOR: [u8; 4] = [176u8, 94u8, 139u8, 169u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftTypes),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::String,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftRanks),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                ownerBatchRemoveSpecialNftTypeAndRankReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `ownerRemoveNftTypeAndRank(uint256,string)` and selector `0x654251eb`.
```solidity
function ownerRemoveNftTypeAndRank(uint256 nftType, string memory nftRank) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerRemoveNftTypeAndRankCall {
        #[allow(missing_docs)]
        pub nftType: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nftRank: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`ownerRemoveNftTypeAndRank(uint256,string)`](ownerRemoveNftTypeAndRankCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerRemoveNftTypeAndRankReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerRemoveNftTypeAndRankCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerRemoveNftTypeAndRankCall) -> Self {
                    (value.nftType, value.nftRank)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerRemoveNftTypeAndRankCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        nftType: tuple.0,
                        nftRank: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerRemoveNftTypeAndRankReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerRemoveNftTypeAndRankReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerRemoveNftTypeAndRankReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl ownerRemoveNftTypeAndRankReturn {
            fn _tokenize(
                &self,
            ) -> <ownerRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerRemoveNftTypeAndRankCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerRemoveNftTypeAndRankReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerRemoveNftTypeAndRank(uint256,string)";
            const SELECTOR: [u8; 4] = [101u8, 66u8, 81u8, 235u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftType),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.nftRank,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                ownerRemoveNftTypeAndRankReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `ownerUpdateThreshold(uint256)` and selector `0xee50c7c4`.
```solidity
function ownerUpdateThreshold(uint256 newThreshold) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerUpdateThresholdCall {
        #[allow(missing_docs)]
        pub newThreshold: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`ownerUpdateThreshold(uint256)`](ownerUpdateThresholdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerUpdateThresholdReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerUpdateThresholdCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerUpdateThresholdCall) -> Self {
                    (value.newThreshold,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerUpdateThresholdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newThreshold: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerUpdateThresholdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ownerUpdateThresholdReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ownerUpdateThresholdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl ownerUpdateThresholdReturn {
            fn _tokenize(
                &self,
            ) -> <ownerUpdateThresholdCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerUpdateThresholdCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerUpdateThresholdReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerUpdateThreshold(uint256)";
            const SELECTOR: [u8; 4] = [238u8, 80u8, 199u8, 196u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.newThreshold),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                ownerUpdateThresholdReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `renounceOwnership()` and selector `0x715018a6`.
```solidity
function renounceOwnership() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipCall;
    ///Container type for the return parameters of the [`renounceOwnership()`](renounceOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct renounceOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<renounceOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: renounceOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for renounceOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl renounceOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <renounceOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for renounceOwnershipCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = renounceOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "renounceOwnership()";
            const SELECTOR: [u8; 4] = [113u8, 80u8, 24u8, 166u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                renounceOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `specialNftTypeAndRank(uint256)` and selector `0x2c3ec80b`.
```solidity
function specialNftTypeAndRank(uint256) external view returns (uint256 nftType, string memory nftRank);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct specialNftTypeAndRankCall(
        pub alloy::sol_types::private::primitives::aliases::U256,
    );
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`specialNftTypeAndRank(uint256)`](specialNftTypeAndRankCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct specialNftTypeAndRankReturn {
        #[allow(missing_docs)]
        pub nftType: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub nftRank: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<specialNftTypeAndRankCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: specialNftTypeAndRankCall) -> Self {
                    (value.0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for specialNftTypeAndRankCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self(tuple.0)
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::String,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<specialNftTypeAndRankReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: specialNftTypeAndRankReturn) -> Self {
                    (value.nftType, value.nftRank)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for specialNftTypeAndRankReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        nftType: tuple.0,
                        nftRank: tuple.1,
                    }
                }
            }
        }
        impl specialNftTypeAndRankReturn {
            fn _tokenize(
                &self,
            ) -> <specialNftTypeAndRankCall as alloy_sol_types::SolCall>::ReturnToken<
                '_,
            > {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nftType),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.nftRank,
                    ),
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for specialNftTypeAndRankCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = specialNftTypeAndRankReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::String,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "specialNftTypeAndRank(uint256)";
            const SELECTOR: [u8; 4] = [44u8, 62u8, 200u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.0),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                specialNftTypeAndRankReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `stakeContract()` and selector `0x1a186227`.
```solidity
function stakeContract() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stakeContractCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`stakeContract()`](stakeContractCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stakeContractReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stakeContractCall> for UnderlyingRustTuple<'_> {
                fn from(value: stakeContractCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for stakeContractCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stakeContractReturn> for UnderlyingRustTuple<'_> {
                fn from(value: stakeContractReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for stakeContractReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for stakeContractCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::Address;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "stakeContract()";
            const SELECTOR: [u8; 4] = [26u8, 24u8, 98u8, 39u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        ret,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: stakeContractReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: stakeContractReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `stakeThreshold()` and selector `0xf11f77f9`.
```solidity
function stakeThreshold() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stakeThresholdCall;
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    ///Container type for the return parameters of the [`stakeThreshold()`](stakeThresholdCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct stakeThresholdReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stakeThresholdCall> for UnderlyingRustTuple<'_> {
                fn from(value: stakeThresholdCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for stakeThresholdCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<stakeThresholdReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: stakeThresholdReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for stakeThresholdReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for stakeThresholdCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = alloy::sol_types::private::primitives::aliases::U256;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "stakeThreshold()";
            const SELECTOR: [u8; 4] = [241u8, 31u8, 119u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(ret),
                )
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(|r| {
                        let r: stakeThresholdReturn = r.into();
                        r._0
                    })
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(|r| {
                        let r: stakeThresholdReturn = r.into();
                        r._0
                    })
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `transferOwnership(address)` and selector `0xf2fde38b`.
```solidity
function transferOwnership(address newOwner) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipCall {
        #[allow(missing_docs)]
        pub newOwner: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`transferOwnership(address)`](transferOwnershipCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferOwnershipReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipCall) -> Self {
                    (value.newOwner,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newOwner: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferOwnershipReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferOwnershipReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferOwnershipReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl transferOwnershipReturn {
            fn _tokenize(
                &self,
            ) -> <transferOwnershipCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferOwnershipCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferOwnershipReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferOwnership(address)";
            const SELECTOR: [u8; 4] = [242u8, 253u8, 227u8, 139u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.newOwner,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                transferOwnershipReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Default, Debug, PartialEq, Eq, Hash)]
    /**Function with signature `updateStakeContract(address)` and selector `0x830c6cc2`.
```solidity
function updateStakeContract(address _stakeContract) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateStakeContractCall {
        #[allow(missing_docs)]
        pub _stakeContract: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`updateStakeContract(address)`](updateStakeContractCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct updateStakeContractReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateStakeContractCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateStakeContractCall) -> Self {
                    (value._stakeContract,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateStakeContractCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _stakeContract: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            #[allow(dead_code)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<updateStakeContractReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: updateStakeContractReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for updateStakeContractReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        impl updateStakeContractReturn {
            fn _tokenize(
                &self,
            ) -> <updateStakeContractCall as alloy_sol_types::SolCall>::ReturnToken<'_> {
                ()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for updateStakeContractCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = updateStakeContractReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "updateStakeContract(address)";
            const SELECTOR: [u8; 4] = [131u8, 12u8, 108u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._stakeContract,
                    ),
                )
            }
            #[inline]
            fn tokenize_returns(ret: &Self::Return) -> Self::ReturnToken<'_> {
                updateStakeContractReturn::_tokenize(ret)
            }
            #[inline]
            fn abi_decode_returns(data: &[u8]) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data)
                    .map(Into::into)
            }
            #[inline]
            fn abi_decode_returns_validate(
                data: &[u8],
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence_validate(data)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`HoprStakingProxyForNetworkRegistry`](self) function calls.
    #[derive(Clone)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive()]
    pub enum HoprStakingProxyForNetworkRegistryCalls {
        #[allow(missing_docs)]
        canOperateFor(canOperateForCall),
        #[allow(missing_docs)]
        eligibleNftTypeAndRank(eligibleNftTypeAndRankCall),
        #[allow(missing_docs)]
        maxAllowedRegistrations(maxAllowedRegistrationsCall),
        #[allow(missing_docs)]
        maxRegistrationsPerSpecialNft(maxRegistrationsPerSpecialNftCall),
        #[allow(missing_docs)]
        owner(ownerCall),
        #[allow(missing_docs)]
        ownerAddNftTypeAndRank(ownerAddNftTypeAndRankCall),
        #[allow(missing_docs)]
        ownerBatchAddNftTypeAndRank(ownerBatchAddNftTypeAndRankCall),
        #[allow(missing_docs)]
        ownerBatchAddSpecialNftTypeAndRank(ownerBatchAddSpecialNftTypeAndRankCall),
        #[allow(missing_docs)]
        ownerBatchRemoveNftTypeAndRank(ownerBatchRemoveNftTypeAndRankCall),
        #[allow(missing_docs)]
        ownerBatchRemoveSpecialNftTypeAndRank(ownerBatchRemoveSpecialNftTypeAndRankCall),
        #[allow(missing_docs)]
        ownerRemoveNftTypeAndRank(ownerRemoveNftTypeAndRankCall),
        #[allow(missing_docs)]
        ownerUpdateThreshold(ownerUpdateThresholdCall),
        #[allow(missing_docs)]
        renounceOwnership(renounceOwnershipCall),
        #[allow(missing_docs)]
        specialNftTypeAndRank(specialNftTypeAndRankCall),
        #[allow(missing_docs)]
        stakeContract(stakeContractCall),
        #[allow(missing_docs)]
        stakeThreshold(stakeThresholdCall),
        #[allow(missing_docs)]
        transferOwnership(transferOwnershipCall),
        #[allow(missing_docs)]
        updateStakeContract(updateStakeContractCall),
    }
    impl HoprStakingProxyForNetworkRegistryCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [26u8, 24u8, 98u8, 39u8],
            [44u8, 62u8, 200u8, 11u8],
            [80u8, 100u8, 114u8, 204u8],
            [101u8, 66u8, 81u8, 235u8],
            [106u8, 59u8, 100u8, 182u8],
            [113u8, 80u8, 24u8, 166u8],
            [131u8, 12u8, 108u8, 194u8],
            [141u8, 165u8, 203u8, 91u8],
            [155u8, 151u8, 7u8, 111u8],
            [176u8, 94u8, 139u8, 169u8],
            [179u8, 84u8, 78u8, 130u8],
            [186u8, 28u8, 239u8, 35u8],
            [216u8, 90u8, 208u8, 68u8],
            [222u8, 98u8, 108u8, 14u8],
            [238u8, 80u8, 199u8, 196u8],
            [241u8, 31u8, 119u8, 249u8],
            [242u8, 253u8, 227u8, 139u8],
            [251u8, 102u8, 172u8, 87u8],
        ];
        /// The names of the variants in the same order as `SELECTORS`.
        pub const VARIANT_NAMES: &'static [&'static str] = &[
            ::core::stringify!(stakeContract),
            ::core::stringify!(specialNftTypeAndRank),
            ::core::stringify!(ownerBatchAddNftTypeAndRank),
            ::core::stringify!(ownerRemoveNftTypeAndRank),
            ::core::stringify!(ownerBatchAddSpecialNftTypeAndRank),
            ::core::stringify!(renounceOwnership),
            ::core::stringify!(updateStakeContract),
            ::core::stringify!(owner),
            ::core::stringify!(ownerAddNftTypeAndRank),
            ::core::stringify!(ownerBatchRemoveSpecialNftTypeAndRank),
            ::core::stringify!(maxAllowedRegistrations),
            ::core::stringify!(maxRegistrationsPerSpecialNft),
            ::core::stringify!(canOperateFor),
            ::core::stringify!(eligibleNftTypeAndRank),
            ::core::stringify!(ownerUpdateThreshold),
            ::core::stringify!(stakeThreshold),
            ::core::stringify!(transferOwnership),
            ::core::stringify!(ownerBatchRemoveNftTypeAndRank),
        ];
        /// The signatures in the same order as `SELECTORS`.
        pub const SIGNATURES: &'static [&'static str] = &[
            <stakeContractCall as alloy_sol_types::SolCall>::SIGNATURE,
            <specialNftTypeAndRankCall as alloy_sol_types::SolCall>::SIGNATURE,
            <ownerBatchAddNftTypeAndRankCall as alloy_sol_types::SolCall>::SIGNATURE,
            <ownerRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::SIGNATURE,
            <ownerBatchAddSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::SIGNATURE,
            <renounceOwnershipCall as alloy_sol_types::SolCall>::SIGNATURE,
            <updateStakeContractCall as alloy_sol_types::SolCall>::SIGNATURE,
            <ownerCall as alloy_sol_types::SolCall>::SIGNATURE,
            <ownerAddNftTypeAndRankCall as alloy_sol_types::SolCall>::SIGNATURE,
            <ownerBatchRemoveSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::SIGNATURE,
            <maxAllowedRegistrationsCall as alloy_sol_types::SolCall>::SIGNATURE,
            <maxRegistrationsPerSpecialNftCall as alloy_sol_types::SolCall>::SIGNATURE,
            <canOperateForCall as alloy_sol_types::SolCall>::SIGNATURE,
            <eligibleNftTypeAndRankCall as alloy_sol_types::SolCall>::SIGNATURE,
            <ownerUpdateThresholdCall as alloy_sol_types::SolCall>::SIGNATURE,
            <stakeThresholdCall as alloy_sol_types::SolCall>::SIGNATURE,
            <transferOwnershipCall as alloy_sol_types::SolCall>::SIGNATURE,
            <ownerBatchRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::SIGNATURE,
        ];
        /// Returns the signature for the given selector, if known.
        #[inline]
        pub fn signature_by_selector(
            selector: [u8; 4usize],
        ) -> ::core::option::Option<&'static str> {
            match Self::SELECTORS.binary_search(&selector) {
                ::core::result::Result::Ok(idx) => {
                    ::core::option::Option::Some(Self::SIGNATURES[idx])
                }
                ::core::result::Result::Err(_) => ::core::option::Option::None,
            }
        }
        /// Returns the enum variant name for the given selector, if known.
        #[inline]
        pub fn name_by_selector(
            selector: [u8; 4usize],
        ) -> ::core::option::Option<&'static str> {
            let sig = Self::signature_by_selector(selector)?;
            sig.split_once('(').map(|(name, _)| name)
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HoprStakingProxyForNetworkRegistryCalls {
        const NAME: &'static str = "HoprStakingProxyForNetworkRegistryCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 18usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::canOperateFor(_) => {
                    <canOperateForCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::eligibleNftTypeAndRank(_) => {
                    <eligibleNftTypeAndRankCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxAllowedRegistrations(_) => {
                    <maxAllowedRegistrationsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::maxRegistrationsPerSpecialNft(_) => {
                    <maxRegistrationsPerSpecialNftCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::ownerAddNftTypeAndRank(_) => {
                    <ownerAddNftTypeAndRankCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ownerBatchAddNftTypeAndRank(_) => {
                    <ownerBatchAddNftTypeAndRankCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ownerBatchAddSpecialNftTypeAndRank(_) => {
                    <ownerBatchAddSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ownerBatchRemoveNftTypeAndRank(_) => {
                    <ownerBatchRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ownerBatchRemoveSpecialNftTypeAndRank(_) => {
                    <ownerBatchRemoveSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ownerRemoveNftTypeAndRank(_) => {
                    <ownerRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ownerUpdateThreshold(_) => {
                    <ownerUpdateThresholdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::renounceOwnership(_) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::specialNftTypeAndRank(_) => {
                    <specialNftTypeAndRankCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::stakeContract(_) => {
                    <stakeContractCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::stakeThreshold(_) => {
                    <stakeThresholdCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferOwnership(_) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::updateStakeContract(_) => {
                    <updateStakeContractCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HoprStakingProxyForNetworkRegistryCalls>] = &[
                {
                    fn stakeContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <stakeContractCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprStakingProxyForNetworkRegistryCalls::stakeContract)
                    }
                    stakeContract
                },
                {
                    fn specialNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <specialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::specialNftTypeAndRank,
                            )
                    }
                    specialNftTypeAndRank
                },
                {
                    fn ownerBatchAddNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerBatchAddNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerBatchAddNftTypeAndRank,
                            )
                    }
                    ownerBatchAddNftTypeAndRank
                },
                {
                    fn ownerRemoveNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerRemoveNftTypeAndRank,
                            )
                    }
                    ownerRemoveNftTypeAndRank
                },
                {
                    fn ownerBatchAddSpecialNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerBatchAddSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerBatchAddSpecialNftTypeAndRank,
                            )
                    }
                    ownerBatchAddSpecialNftTypeAndRank
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn updateStakeContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <updateStakeContractCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::updateStakeContract,
                            )
                    }
                    updateStakeContract
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(data)
                            .map(HoprStakingProxyForNetworkRegistryCalls::owner)
                    }
                    owner
                },
                {
                    fn ownerAddNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerAddNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerAddNftTypeAndRank,
                            )
                    }
                    ownerAddNftTypeAndRank
                },
                {
                    fn ownerBatchRemoveSpecialNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerBatchRemoveSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerBatchRemoveSpecialNftTypeAndRank,
                            )
                    }
                    ownerBatchRemoveSpecialNftTypeAndRank
                },
                {
                    fn maxAllowedRegistrations(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <maxAllowedRegistrationsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::maxAllowedRegistrations,
                            )
                    }
                    maxAllowedRegistrations
                },
                {
                    fn maxRegistrationsPerSpecialNft(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <maxRegistrationsPerSpecialNftCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::maxRegistrationsPerSpecialNft,
                            )
                    }
                    maxRegistrationsPerSpecialNft
                },
                {
                    fn canOperateFor(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <canOperateForCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprStakingProxyForNetworkRegistryCalls::canOperateFor)
                    }
                    canOperateFor
                },
                {
                    fn eligibleNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <eligibleNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::eligibleNftTypeAndRank,
                            )
                    }
                    eligibleNftTypeAndRank
                },
                {
                    fn ownerUpdateThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerUpdateThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerUpdateThreshold,
                            )
                    }
                    ownerUpdateThreshold
                },
                {
                    fn stakeThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <stakeThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(HoprStakingProxyForNetworkRegistryCalls::stakeThreshold)
                    }
                    stakeThreshold
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
                {
                    fn ownerBatchRemoveNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerBatchRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerBatchRemoveNftTypeAndRank,
                            )
                    }
                    ownerBatchRemoveNftTypeAndRank
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HoprStakingProxyForNetworkRegistryCalls>] = &[
                {
                    fn stakeContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <stakeContractCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprStakingProxyForNetworkRegistryCalls::stakeContract)
                    }
                    stakeContract
                },
                {
                    fn specialNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <specialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::specialNftTypeAndRank,
                            )
                    }
                    specialNftTypeAndRank
                },
                {
                    fn ownerBatchAddNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerBatchAddNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerBatchAddNftTypeAndRank,
                            )
                    }
                    ownerBatchAddNftTypeAndRank
                },
                {
                    fn ownerRemoveNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerRemoveNftTypeAndRank,
                            )
                    }
                    ownerRemoveNftTypeAndRank
                },
                {
                    fn ownerBatchAddSpecialNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerBatchAddSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerBatchAddSpecialNftTypeAndRank,
                            )
                    }
                    ownerBatchAddSpecialNftTypeAndRank
                },
                {
                    fn renounceOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::renounceOwnership,
                            )
                    }
                    renounceOwnership
                },
                {
                    fn updateStakeContract(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <updateStakeContractCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::updateStakeContract,
                            )
                    }
                    updateStakeContract
                },
                {
                    fn owner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprStakingProxyForNetworkRegistryCalls::owner)
                    }
                    owner
                },
                {
                    fn ownerAddNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerAddNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerAddNftTypeAndRank,
                            )
                    }
                    ownerAddNftTypeAndRank
                },
                {
                    fn ownerBatchRemoveSpecialNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerBatchRemoveSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerBatchRemoveSpecialNftTypeAndRank,
                            )
                    }
                    ownerBatchRemoveSpecialNftTypeAndRank
                },
                {
                    fn maxAllowedRegistrations(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <maxAllowedRegistrationsCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::maxAllowedRegistrations,
                            )
                    }
                    maxAllowedRegistrations
                },
                {
                    fn maxRegistrationsPerSpecialNft(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <maxRegistrationsPerSpecialNftCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::maxRegistrationsPerSpecialNft,
                            )
                    }
                    maxRegistrationsPerSpecialNft
                },
                {
                    fn canOperateFor(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <canOperateForCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprStakingProxyForNetworkRegistryCalls::canOperateFor)
                    }
                    canOperateFor
                },
                {
                    fn eligibleNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <eligibleNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::eligibleNftTypeAndRank,
                            )
                    }
                    eligibleNftTypeAndRank
                },
                {
                    fn ownerUpdateThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerUpdateThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerUpdateThreshold,
                            )
                    }
                    ownerUpdateThreshold
                },
                {
                    fn stakeThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <stakeThresholdCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprStakingProxyForNetworkRegistryCalls::stakeThreshold)
                    }
                    stakeThreshold
                },
                {
                    fn transferOwnership(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <transferOwnershipCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::transferOwnership,
                            )
                    }
                    transferOwnership
                },
                {
                    fn ownerBatchRemoveNftTypeAndRank(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryCalls,
                    > {
                        <ownerBatchRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryCalls::ownerBatchRemoveNftTypeAndRank,
                            )
                    }
                    ownerBatchRemoveNftTypeAndRank
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::canOperateFor(inner) => {
                    <canOperateForCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::eligibleNftTypeAndRank(inner) => {
                    <eligibleNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxAllowedRegistrations(inner) => {
                    <maxAllowedRegistrationsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::maxRegistrationsPerSpecialNft(inner) => {
                    <maxRegistrationsPerSpecialNftCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::ownerAddNftTypeAndRank(inner) => {
                    <ownerAddNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ownerBatchAddNftTypeAndRank(inner) => {
                    <ownerBatchAddNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ownerBatchAddSpecialNftTypeAndRank(inner) => {
                    <ownerBatchAddSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ownerBatchRemoveNftTypeAndRank(inner) => {
                    <ownerBatchRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ownerBatchRemoveSpecialNftTypeAndRank(inner) => {
                    <ownerBatchRemoveSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ownerRemoveNftTypeAndRank(inner) => {
                    <ownerRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ownerUpdateThreshold(inner) => {
                    <ownerUpdateThresholdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::specialNftTypeAndRank(inner) => {
                    <specialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::stakeContract(inner) => {
                    <stakeContractCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::stakeThreshold(inner) => {
                    <stakeThresholdCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::updateStakeContract(inner) => {
                    <updateStakeContractCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::canOperateFor(inner) => {
                    <canOperateForCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::eligibleNftTypeAndRank(inner) => {
                    <eligibleNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxAllowedRegistrations(inner) => {
                    <maxAllowedRegistrationsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::maxRegistrationsPerSpecialNft(inner) => {
                    <maxRegistrationsPerSpecialNftCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::ownerAddNftTypeAndRank(inner) => {
                    <ownerAddNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ownerBatchAddNftTypeAndRank(inner) => {
                    <ownerBatchAddNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ownerBatchAddSpecialNftTypeAndRank(inner) => {
                    <ownerBatchAddSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ownerBatchRemoveNftTypeAndRank(inner) => {
                    <ownerBatchRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ownerBatchRemoveSpecialNftTypeAndRank(inner) => {
                    <ownerBatchRemoveSpecialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ownerRemoveNftTypeAndRank(inner) => {
                    <ownerRemoveNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ownerUpdateThreshold(inner) => {
                    <ownerUpdateThresholdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::renounceOwnership(inner) => {
                    <renounceOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::specialNftTypeAndRank(inner) => {
                    <specialNftTypeAndRankCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::stakeContract(inner) => {
                    <stakeContractCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::stakeThreshold(inner) => {
                    <stakeThresholdCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferOwnership(inner) => {
                    <transferOwnershipCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::updateStakeContract(inner) => {
                    <updateStakeContractCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`HoprStakingProxyForNetworkRegistry`](self) custom errors.
    #[derive(Clone)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum HoprStakingProxyForNetworkRegistryErrors {
        #[allow(missing_docs)]
        MaxRegistrationsMismatch(MaxRegistrationsMismatch),
        #[allow(missing_docs)]
        NftRanksMismatch(NftRanksMismatch),
        #[allow(missing_docs)]
        OwnableInvalidOwner(OwnableInvalidOwner),
        #[allow(missing_docs)]
        OwnableUnauthorizedAccount(OwnableUnauthorizedAccount),
        #[allow(missing_docs)]
        SameStakingThreshold(SameStakingThreshold),
        #[allow(missing_docs)]
        ZeroAddress(ZeroAddress),
    }
    impl HoprStakingProxyForNetworkRegistryErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [17u8, 140u8, 218u8, 167u8],
            [25u8, 121u8, 16u8, 233u8],
            [30u8, 79u8, 189u8, 247u8],
            [32u8, 228u8, 123u8, 19u8],
            [72u8, 133u8, 245u8, 155u8],
            [234u8, 192u8, 211u8, 137u8],
        ];
        /// The names of the variants in the same order as `SELECTORS`.
        pub const VARIANT_NAMES: &'static [&'static str] = &[
            ::core::stringify!(OwnableUnauthorizedAccount),
            ::core::stringify!(MaxRegistrationsMismatch),
            ::core::stringify!(OwnableInvalidOwner),
            ::core::stringify!(SameStakingThreshold),
            ::core::stringify!(NftRanksMismatch),
            ::core::stringify!(ZeroAddress),
        ];
        /// The signatures in the same order as `SELECTORS`.
        pub const SIGNATURES: &'static [&'static str] = &[
            <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SIGNATURE,
            <MaxRegistrationsMismatch as alloy_sol_types::SolError>::SIGNATURE,
            <OwnableInvalidOwner as alloy_sol_types::SolError>::SIGNATURE,
            <SameStakingThreshold as alloy_sol_types::SolError>::SIGNATURE,
            <NftRanksMismatch as alloy_sol_types::SolError>::SIGNATURE,
            <ZeroAddress as alloy_sol_types::SolError>::SIGNATURE,
        ];
        /// Returns the signature for the given selector, if known.
        #[inline]
        pub fn signature_by_selector(
            selector: [u8; 4usize],
        ) -> ::core::option::Option<&'static str> {
            match Self::SELECTORS.binary_search(&selector) {
                ::core::result::Result::Ok(idx) => {
                    ::core::option::Option::Some(Self::SIGNATURES[idx])
                }
                ::core::result::Result::Err(_) => ::core::option::Option::None,
            }
        }
        /// Returns the enum variant name for the given selector, if known.
        #[inline]
        pub fn name_by_selector(
            selector: [u8; 4usize],
        ) -> ::core::option::Option<&'static str> {
            let sig = Self::signature_by_selector(selector)?;
            sig.split_once('(').map(|(name, _)| name)
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for HoprStakingProxyForNetworkRegistryErrors {
        const NAME: &'static str = "HoprStakingProxyForNetworkRegistryErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 6usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::MaxRegistrationsMismatch(_) => {
                    <MaxRegistrationsMismatch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::NftRanksMismatch(_) => {
                    <NftRanksMismatch as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableInvalidOwner(_) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::SELECTOR
                }
                Self::OwnableUnauthorizedAccount(_) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::SELECTOR
                }
                Self::SameStakingThreshold(_) => {
                    <SameStakingThreshold as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ZeroAddress(_) => {
                    <ZeroAddress as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HoprStakingProxyForNetworkRegistryErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn MaxRegistrationsMismatch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <MaxRegistrationsMismatch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::MaxRegistrationsMismatch,
                            )
                    }
                    MaxRegistrationsMismatch
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn SameStakingThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <SameStakingThreshold as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::SameStakingThreshold,
                            )
                    }
                    SameStakingThreshold
                },
                {
                    fn NftRanksMismatch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <NftRanksMismatch as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::NftRanksMismatch,
                            )
                    }
                    NftRanksMismatch
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw(data)
                            .map(HoprStakingProxyForNetworkRegistryErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data)
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw_validate(
            selector: [u8; 4],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_VALIDATE_SHIMS: &[fn(
                &[u8],
            ) -> alloy_sol_types::Result<HoprStakingProxyForNetworkRegistryErrors>] = &[
                {
                    fn OwnableUnauthorizedAccount(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::OwnableUnauthorizedAccount,
                            )
                    }
                    OwnableUnauthorizedAccount
                },
                {
                    fn MaxRegistrationsMismatch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <MaxRegistrationsMismatch as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::MaxRegistrationsMismatch,
                            )
                    }
                    MaxRegistrationsMismatch
                },
                {
                    fn OwnableInvalidOwner(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::OwnableInvalidOwner,
                            )
                    }
                    OwnableInvalidOwner
                },
                {
                    fn SameStakingThreshold(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <SameStakingThreshold as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::SameStakingThreshold,
                            )
                    }
                    SameStakingThreshold
                },
                {
                    fn NftRanksMismatch(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <NftRanksMismatch as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(
                                HoprStakingProxyForNetworkRegistryErrors::NftRanksMismatch,
                            )
                    }
                    NftRanksMismatch
                },
                {
                    fn ZeroAddress(
                        data: &[u8],
                    ) -> alloy_sol_types::Result<
                        HoprStakingProxyForNetworkRegistryErrors,
                    > {
                        <ZeroAddress as alloy_sol_types::SolError>::abi_decode_raw_validate(
                                data,
                            )
                            .map(HoprStakingProxyForNetworkRegistryErrors::ZeroAddress)
                    }
                    ZeroAddress
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_VALIDATE_SHIMS[idx](data)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::MaxRegistrationsMismatch(inner) => {
                    <MaxRegistrationsMismatch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::NftRanksMismatch(inner) => {
                    <NftRanksMismatch as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::SameStakingThreshold(inner) => {
                    <SameStakingThreshold as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::MaxRegistrationsMismatch(inner) => {
                    <MaxRegistrationsMismatch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::NftRanksMismatch(inner) => {
                    <NftRanksMismatch as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableInvalidOwner(inner) => {
                    <OwnableInvalidOwner as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::OwnableUnauthorizedAccount(inner) => {
                    <OwnableUnauthorizedAccount as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::SameStakingThreshold(inner) => {
                    <SameStakingThreshold as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ZeroAddress(inner) => {
                    <ZeroAddress as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`HoprStakingProxyForNetworkRegistry`](self) events.
    #[derive(Clone)]
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub enum HoprStakingProxyForNetworkRegistryEvents {
        #[allow(missing_docs)]
        NftTypeAndRankAdded(NftTypeAndRankAdded),
        #[allow(missing_docs)]
        NftTypeAndRankRemoved(NftTypeAndRankRemoved),
        #[allow(missing_docs)]
        OwnershipTransferred(OwnershipTransferred),
        #[allow(missing_docs)]
        SpecialNftTypeAndRankAdded(SpecialNftTypeAndRankAdded),
        #[allow(missing_docs)]
        SpecialNftTypeAndRankRemoved(SpecialNftTypeAndRankRemoved),
        #[allow(missing_docs)]
        StakeContractUpdated(StakeContractUpdated),
        #[allow(missing_docs)]
        ThresholdUpdated(ThresholdUpdated),
    }
    impl HoprStakingProxyForNetworkRegistryEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                35u8, 96u8, 238u8, 62u8, 119u8, 72u8, 84u8, 65u8, 207u8, 160u8, 126u8,
                48u8, 232u8, 220u8, 91u8, 3u8, 31u8, 172u8, 56u8, 69u8, 86u8, 71u8,
                200u8, 154u8, 118u8, 52u8, 52u8, 245u8, 135u8, 51u8, 252u8, 193u8,
            ],
            [
                87u8, 59u8, 191u8, 166u8, 121u8, 175u8, 111u8, 220u8, 219u8, 217u8,
                207u8, 25u8, 28u8, 94u8, 243u8, 229u8, 38u8, 89u8, 154u8, 194u8, 191u8,
                117u8, 233u8, 23u8, 125u8, 71u8, 173u8, 184u8, 83u8, 11u8, 156u8, 105u8,
            ],
            [
                139u8, 224u8, 7u8, 156u8, 83u8, 22u8, 89u8, 20u8, 19u8, 68u8, 205u8,
                31u8, 208u8, 164u8, 242u8, 132u8, 25u8, 73u8, 127u8, 151u8, 34u8, 163u8,
                218u8, 175u8, 227u8, 180u8, 24u8, 111u8, 107u8, 100u8, 87u8, 224u8,
            ],
            [
                173u8, 250u8, 142u8, 203u8, 33u8, 182u8, 150u8, 46u8, 188u8, 208u8,
                173u8, 189u8, 154u8, 185u8, 133u8, 183u8, 180u8, 197u8, 181u8, 235u8,
                59u8, 13u8, 234u8, 214u8, 131u8, 23u8, 21u8, 101u8, 199u8, 191u8, 225u8,
                113u8,
            ],
            [
                177u8, 50u8, 62u8, 66u8, 217u8, 123u8, 43u8, 61u8, 69u8, 249u8, 212u8,
                100u8, 27u8, 244u8, 182u8, 179u8, 249u8, 208u8, 208u8, 30u8, 144u8,
                131u8, 42u8, 231u8, 183u8, 65u8, 49u8, 9u8, 183u8, 165u8, 211u8, 71u8,
            ],
            [
                219u8, 117u8, 25u8, 145u8, 3u8, 80u8, 75u8, 209u8, 211u8, 101u8, 61u8,
                231u8, 88u8, 212u8, 41u8, 91u8, 240u8, 13u8, 69u8, 135u8, 225u8, 213u8,
                61u8, 252u8, 17u8, 68u8, 100u8, 204u8, 71u8, 237u8, 151u8, 183u8,
            ],
            [
                228u8, 59u8, 245u8, 245u8, 248u8, 161u8, 33u8, 25u8, 48u8, 229u8, 114u8,
                107u8, 160u8, 171u8, 206u8, 172u8, 177u8, 116u8, 143u8, 151u8, 178u8,
                150u8, 109u8, 179u8, 10u8, 129u8, 139u8, 161u8, 9u8, 97u8, 203u8, 204u8,
            ],
        ];
        /// The names of the variants in the same order as `SELECTORS`.
        pub const VARIANT_NAMES: &'static [&'static str] = &[
            ::core::stringify!(NftTypeAndRankAdded),
            ::core::stringify!(StakeContractUpdated),
            ::core::stringify!(OwnershipTransferred),
            ::core::stringify!(ThresholdUpdated),
            ::core::stringify!(NftTypeAndRankRemoved),
            ::core::stringify!(SpecialNftTypeAndRankRemoved),
            ::core::stringify!(SpecialNftTypeAndRankAdded),
        ];
        /// The signatures in the same order as `SELECTORS`.
        pub const SIGNATURES: &'static [&'static str] = &[
            <NftTypeAndRankAdded as alloy_sol_types::SolEvent>::SIGNATURE,
            <StakeContractUpdated as alloy_sol_types::SolEvent>::SIGNATURE,
            <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE,
            <ThresholdUpdated as alloy_sol_types::SolEvent>::SIGNATURE,
            <NftTypeAndRankRemoved as alloy_sol_types::SolEvent>::SIGNATURE,
            <SpecialNftTypeAndRankRemoved as alloy_sol_types::SolEvent>::SIGNATURE,
            <SpecialNftTypeAndRankAdded as alloy_sol_types::SolEvent>::SIGNATURE,
        ];
        /// Returns the signature for the given selector, if known.
        #[inline]
        pub fn signature_by_selector(
            selector: [u8; 32usize],
        ) -> ::core::option::Option<&'static str> {
            match Self::SELECTORS.binary_search(&selector) {
                ::core::result::Result::Ok(idx) => {
                    ::core::option::Option::Some(Self::SIGNATURES[idx])
                }
                ::core::result::Result::Err(_) => ::core::option::Option::None,
            }
        }
        /// Returns the enum variant name for the given selector, if known.
        #[inline]
        pub fn name_by_selector(
            selector: [u8; 32usize],
        ) -> ::core::option::Option<&'static str> {
            let sig = Self::signature_by_selector(selector)?;
            sig.split_once('(').map(|(name, _)| name)
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface
    for HoprStakingProxyForNetworkRegistryEvents {
        const NAME: &'static str = "HoprStakingProxyForNetworkRegistryEvents";
        const COUNT: usize = 7usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(
                    <NftTypeAndRankAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NftTypeAndRankAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::NftTypeAndRankAdded)
                }
                Some(
                    <NftTypeAndRankRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <NftTypeAndRankRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::NftTypeAndRankRemoved)
                }
                Some(
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <OwnershipTransferred as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::OwnershipTransferred)
                }
                Some(
                    <SpecialNftTypeAndRankAdded as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SpecialNftTypeAndRankAdded as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SpecialNftTypeAndRankAdded)
                }
                Some(
                    <SpecialNftTypeAndRankRemoved as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SpecialNftTypeAndRankRemoved as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::SpecialNftTypeAndRankRemoved)
                }
                Some(
                    <StakeContractUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <StakeContractUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::StakeContractUpdated)
                }
                Some(<ThresholdUpdated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ThresholdUpdated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                        )
                        .map(Self::ThresholdUpdated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData
    for HoprStakingProxyForNetworkRegistryEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::NftTypeAndRankAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::NftTypeAndRankRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SpecialNftTypeAndRankAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SpecialNftTypeAndRankRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::StakeContractUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ThresholdUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::NftTypeAndRankAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::NftTypeAndRankRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::OwnershipTransferred(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SpecialNftTypeAndRankAdded(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SpecialNftTypeAndRankRemoved(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::StakeContractUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ThresholdUpdated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`HoprStakingProxyForNetworkRegistry`](self) contract instance.

See the [wrapper's documentation](`HoprStakingProxyForNetworkRegistryInstance`) for more details.*/
    #[inline]
    pub const fn new<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        __provider: P,
    ) -> HoprStakingProxyForNetworkRegistryInstance<P, N> {
        HoprStakingProxyForNetworkRegistryInstance::<P, N>::new(address, __provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        __provider: P,
        _stakeContract: alloy::sol_types::private::Address,
        _newOwner: alloy::sol_types::private::Address,
        _minStake: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<HoprStakingProxyForNetworkRegistryInstance<P, N>>,
    > {
        HoprStakingProxyForNetworkRegistryInstance::<
            P,
            N,
        >::deploy(__provider, _stakeContract, _newOwner, _minStake)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    >(
        __provider: P,
        _stakeContract: alloy::sol_types::private::Address,
        _newOwner: alloy::sol_types::private::Address,
        _minStake: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<P, N> {
        HoprStakingProxyForNetworkRegistryInstance::<
            P,
            N,
        >::deploy_builder(__provider, _stakeContract, _newOwner, _minStake)
    }
    /**A [`HoprStakingProxyForNetworkRegistry`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`HoprStakingProxyForNetworkRegistry`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct HoprStakingProxyForNetworkRegistryInstance<
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network: ::core::marker::PhantomData<N>,
    }
    #[automatically_derived]
    impl<P, N> ::core::fmt::Debug for HoprStakingProxyForNetworkRegistryInstance<P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("HoprStakingProxyForNetworkRegistryInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HoprStakingProxyForNetworkRegistryInstance<P, N> {
        /**Creates a new wrapper around an on-chain [`HoprStakingProxyForNetworkRegistry`](self) contract instance.

See the [wrapper's documentation](`HoprStakingProxyForNetworkRegistryInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            __provider: P,
        ) -> Self {
            Self {
                address,
                provider: __provider,
                _network: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            __provider: P,
            _stakeContract: alloy::sol_types::private::Address,
            _newOwner: alloy::sol_types::private::Address,
            _minStake: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<HoprStakingProxyForNetworkRegistryInstance<P, N>> {
            let call_builder = Self::deploy_builder(
                __provider,
                _stakeContract,
                _newOwner,
                _minStake,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            __provider: P,
            _stakeContract: alloy::sol_types::private::Address,
            _newOwner: alloy::sol_types::private::Address,
            _minStake: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                __provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            _stakeContract,
                            _newOwner,
                            _minStake,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<P: ::core::clone::Clone, N> HoprStakingProxyForNetworkRegistryInstance<&P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> HoprStakingProxyForNetworkRegistryInstance<P, N> {
            HoprStakingProxyForNetworkRegistryInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HoprStakingProxyForNetworkRegistryInstance<P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<&P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`canOperateFor`] function.
        pub fn canOperateFor(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, canOperateForCall, N> {
            self.call_builder(&canOperateForCall { _0, _1 })
        }
        ///Creates a new call builder for the [`eligibleNftTypeAndRank`] function.
        pub fn eligibleNftTypeAndRank(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, eligibleNftTypeAndRankCall, N> {
            self.call_builder(&eligibleNftTypeAndRankCall(_0))
        }
        ///Creates a new call builder for the [`maxAllowedRegistrations`] function.
        pub fn maxAllowedRegistrations(
            &self,
            account: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, maxAllowedRegistrationsCall, N> {
            self.call_builder(
                &maxAllowedRegistrationsCall {
                    account,
                },
            )
        }
        ///Creates a new call builder for the [`maxRegistrationsPerSpecialNft`] function.
        pub fn maxRegistrationsPerSpecialNft(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, maxRegistrationsPerSpecialNftCall, N> {
            self.call_builder(&maxRegistrationsPerSpecialNftCall(_0))
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<&P, ownerCall, N> {
            self.call_builder(&ownerCall)
        }
        ///Creates a new call builder for the [`ownerAddNftTypeAndRank`] function.
        pub fn ownerAddNftTypeAndRank(
            &self,
            nftType: alloy::sol_types::private::primitives::aliases::U256,
            nftRank: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<&P, ownerAddNftTypeAndRankCall, N> {
            self.call_builder(
                &ownerAddNftTypeAndRankCall {
                    nftType,
                    nftRank,
                },
            )
        }
        ///Creates a new call builder for the [`ownerBatchAddNftTypeAndRank`] function.
        pub fn ownerBatchAddNftTypeAndRank(
            &self,
            nftTypes: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            nftRanks: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
        ) -> alloy_contract::SolCallBuilder<&P, ownerBatchAddNftTypeAndRankCall, N> {
            self.call_builder(
                &ownerBatchAddNftTypeAndRankCall {
                    nftTypes,
                    nftRanks,
                },
            )
        }
        ///Creates a new call builder for the [`ownerBatchAddSpecialNftTypeAndRank`] function.
        pub fn ownerBatchAddSpecialNftTypeAndRank(
            &self,
            nftTypes: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            nftRanks: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
            maxRegistrations: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            ownerBatchAddSpecialNftTypeAndRankCall,
            N,
        > {
            self.call_builder(
                &ownerBatchAddSpecialNftTypeAndRankCall {
                    nftTypes,
                    nftRanks,
                    maxRegistrations,
                },
            )
        }
        ///Creates a new call builder for the [`ownerBatchRemoveNftTypeAndRank`] function.
        pub fn ownerBatchRemoveNftTypeAndRank(
            &self,
            nftTypes: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            nftRanks: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
        ) -> alloy_contract::SolCallBuilder<&P, ownerBatchRemoveNftTypeAndRankCall, N> {
            self.call_builder(
                &ownerBatchRemoveNftTypeAndRankCall {
                    nftTypes,
                    nftRanks,
                },
            )
        }
        ///Creates a new call builder for the [`ownerBatchRemoveSpecialNftTypeAndRank`] function.
        pub fn ownerBatchRemoveSpecialNftTypeAndRank(
            &self,
            nftTypes: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            nftRanks: alloy::sol_types::private::Vec<alloy::sol_types::private::String>,
        ) -> alloy_contract::SolCallBuilder<
            &P,
            ownerBatchRemoveSpecialNftTypeAndRankCall,
            N,
        > {
            self.call_builder(
                &ownerBatchRemoveSpecialNftTypeAndRankCall {
                    nftTypes,
                    nftRanks,
                },
            )
        }
        ///Creates a new call builder for the [`ownerRemoveNftTypeAndRank`] function.
        pub fn ownerRemoveNftTypeAndRank(
            &self,
            nftType: alloy::sol_types::private::primitives::aliases::U256,
            nftRank: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<&P, ownerRemoveNftTypeAndRankCall, N> {
            self.call_builder(
                &ownerRemoveNftTypeAndRankCall {
                    nftType,
                    nftRank,
                },
            )
        }
        ///Creates a new call builder for the [`ownerUpdateThreshold`] function.
        pub fn ownerUpdateThreshold(
            &self,
            newThreshold: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, ownerUpdateThresholdCall, N> {
            self.call_builder(
                &ownerUpdateThresholdCall {
                    newThreshold,
                },
            )
        }
        ///Creates a new call builder for the [`renounceOwnership`] function.
        pub fn renounceOwnership(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, renounceOwnershipCall, N> {
            self.call_builder(&renounceOwnershipCall)
        }
        ///Creates a new call builder for the [`specialNftTypeAndRank`] function.
        pub fn specialNftTypeAndRank(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<&P, specialNftTypeAndRankCall, N> {
            self.call_builder(&specialNftTypeAndRankCall(_0))
        }
        ///Creates a new call builder for the [`stakeContract`] function.
        pub fn stakeContract(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, stakeContractCall, N> {
            self.call_builder(&stakeContractCall)
        }
        ///Creates a new call builder for the [`stakeThreshold`] function.
        pub fn stakeThreshold(
            &self,
        ) -> alloy_contract::SolCallBuilder<&P, stakeThresholdCall, N> {
            self.call_builder(&stakeThresholdCall)
        }
        ///Creates a new call builder for the [`transferOwnership`] function.
        pub fn transferOwnership(
            &self,
            newOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, transferOwnershipCall, N> {
            self.call_builder(&transferOwnershipCall { newOwner })
        }
        ///Creates a new call builder for the [`updateStakeContract`] function.
        pub fn updateStakeContract(
            &self,
            _stakeContract: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<&P, updateStakeContractCall, N> {
            self.call_builder(
                &updateStakeContractCall {
                    _stakeContract,
                },
            )
        }
    }
    /// Event filters.
    impl<
        P: alloy_contract::private::Provider<N>,
        N: alloy_contract::private::Network,
    > HoprStakingProxyForNetworkRegistryInstance<P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<&P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`NftTypeAndRankAdded`] event.
        pub fn NftTypeAndRankAdded_filter(
            &self,
        ) -> alloy_contract::Event<&P, NftTypeAndRankAdded, N> {
            self.event_filter::<NftTypeAndRankAdded>()
        }
        ///Creates a new event filter for the [`NftTypeAndRankRemoved`] event.
        pub fn NftTypeAndRankRemoved_filter(
            &self,
        ) -> alloy_contract::Event<&P, NftTypeAndRankRemoved, N> {
            self.event_filter::<NftTypeAndRankRemoved>()
        }
        ///Creates a new event filter for the [`OwnershipTransferred`] event.
        pub fn OwnershipTransferred_filter(
            &self,
        ) -> alloy_contract::Event<&P, OwnershipTransferred, N> {
            self.event_filter::<OwnershipTransferred>()
        }
        ///Creates a new event filter for the [`SpecialNftTypeAndRankAdded`] event.
        pub fn SpecialNftTypeAndRankAdded_filter(
            &self,
        ) -> alloy_contract::Event<&P, SpecialNftTypeAndRankAdded, N> {
            self.event_filter::<SpecialNftTypeAndRankAdded>()
        }
        ///Creates a new event filter for the [`SpecialNftTypeAndRankRemoved`] event.
        pub fn SpecialNftTypeAndRankRemoved_filter(
            &self,
        ) -> alloy_contract::Event<&P, SpecialNftTypeAndRankRemoved, N> {
            self.event_filter::<SpecialNftTypeAndRankRemoved>()
        }
        ///Creates a new event filter for the [`StakeContractUpdated`] event.
        pub fn StakeContractUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, StakeContractUpdated, N> {
            self.event_filter::<StakeContractUpdated>()
        }
        ///Creates a new event filter for the [`ThresholdUpdated`] event.
        pub fn ThresholdUpdated_filter(
            &self,
        ) -> alloy_contract::Event<&P, ThresholdUpdated, N> {
            self.event_filter::<ThresholdUpdated>()
        }
    }
}
